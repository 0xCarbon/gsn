{
  "address": "0x7b926EAdB8A83CeBE0D851b817e2B97fd01e0fD0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxUnstakeDelay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_burnAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "burnAddress",
          "type": "address"
        }
      ],
      "name": "BurnAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayHub",
          "type": "address"
        }
      ],
      "name": "HubAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayHub",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "removalTime",
          "type": "uint256"
        }
      ],
      "name": "HubUnauthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unstakeDelay",
          "type": "uint256"
        }
      ],
      "name": "StakeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "StakePenalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawTime",
          "type": "uint256"
        }
      ],
      "name": "StakeUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeWithdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayHub",
          "type": "address"
        }
      ],
      "name": "authorizeHubByManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayHub",
          "type": "address"
        }
      ],
      "name": "authorizeHubByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorizedHubs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "removalTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBurnAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxUnstakeDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        }
      ],
      "name": "getStakeInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stake",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unstakeDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "withdrawTime",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct IStakeManager.StakeInfo",
          "name": "stakeInfo",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "isSenderAuthorizedHub",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "penalizeRelayManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_burnAddress",
          "type": "address"
        }
      ],
      "name": "setBurnAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "setRelayManagerOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "unstakeDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stakeForRelayManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unstakeDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawTime",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayHub",
          "type": "address"
        }
      ],
      "name": "unauthorizeHubByManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayHub",
          "type": "address"
        }
      ],
      "name": "unauthorizeHubByOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        }
      ],
      "name": "unlockStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionSM",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x53b7c87ae387bcbb70106166451d37de7516ba1ad26ab71ece09f6a54dfa7201",
  "receipt": {
    "to": null,
    "from": "0xd21934eD8eAf27a67f0A70042Af50A1D6d195E81",
    "contractAddress": "0x7b926EAdB8A83CeBE0D851b817e2B97fd01e0fD0",
    "transactionIndex": 0,
    "gasUsed": "51702204",
    "logsBloom": "0x
    "blockHash": "0xb9dac79d41aa77c9c40fe9ecb4ee9f946d571e0b5e97505ed1b1a963574addde",
    "transactionHash": "0x53b7c87ae387bcbb70106166451d37de7516ba1ad26ab71ece09f6a54dfa7201",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20598,
        "transactionHash": "0x53b7c87ae387bcbb70106166451d37de7516ba1ad26ab71ece09f6a54dfa7201",
        "address": "0x7b926EAdB8A83CeBE0D851b817e2B97fd01e0fD0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d21934ed8eaf27a67f0a70042af50a1d6d195e81"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb9dac79d41aa77c9c40fe9ecb4ee9f946d571e0b5e97505ed1b1a963574addde"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 20598,
        "transactionHash": "0x53b7c87ae387bcbb70106166451d37de7516ba1ad26ab71ece09f6a54dfa7201",
        "address": "0x7b926EAdB8A83CeBE0D851b817e2B97fd01e0fD0",
        "topics": [
          "0xb0d2ad16ddd4d3dd008ebff0b7e7699bbfa920003cb0764acb871951d1cd4999",
          "0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb9dac79d41aa77c9c40fe9ecb4ee9f946d571e0b5e97505ed1b1a963574addde"
      }
    ],
    "blockNumber": 20598,
    "cumulativeGasUsed": "38830024",
    "status": 1,
    "byzantium": true
  },
  "args": [
    100000000,
    "0xffffffffffffffffffffffffffffffffffffffff"
  ],
  "numDeployments": 2,
  "solcInputHash": "ed54ecf1e58c2e0b82a21139c2bc4bdb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxUnstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"}],\"name\":\"BurnAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayHub\",\"type\":\"address\"}],\"name\":\"HubAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayHub\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removalTime\",\"type\":\"uint256\"}],\"name\":\"HubUnauthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelay\",\"type\":\"uint256\"}],\"name\":\"StakeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"StakePenalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayHub\",\"type\":\"address\"}],\"name\":\"authorizeHubByManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayHub\",\"type\":\"address\"}],\"name\":\"authorizeHubByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedHubs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"removalTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBurnAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxUnstakeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"stakeInfo\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isSenderAuthorizedHub\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"penalizeRelayManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnAddress\",\"type\":\"address\"}],\"name\":\"setBurnAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setRelayManagerOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeForRelayManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayHub\",\"type\":\"address\"}],\"name\":\"unauthorizeHubByManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayHub\",\"type\":\"address\"}],\"name\":\"unauthorizeHubByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"}],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionSM\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"authorizeHubByOwner(address,address)\":{\"params\":{\"relayHub\":\"The address of a `RelayHub` to be authorized.\",\"relayManager\":\"The address of a Relay Manager whose stake is to be authorized for the new `RelayHub`.\"}},\"getBurnAddress()\":{\"returns\":{\"_0\":\"The address that will receive the 'burned' part of the penalized stake.\"}},\"getCreationBlock()\":{\"returns\":{\"_0\":\"the block number in which the contract has been deployed.\"}},\"getMaxUnstakeDelay()\":{\"returns\":{\"_0\":\"The maximum unstake delay this `StakeManger` allows. This is to prevent locking money forever by mistake.\"}},\"getStakeInfo(address)\":{\"params\":{\"relayManager\":\"The address of a Relay Manager.\"},\"returns\":{\"isSenderAuthorizedHub\":\"`true` if the `msg.sender` for this call was a `RelayHub` that is authorized now. `false` if the `msg.sender` for this call is not authorized.\",\"stakeInfo\":\"The `StakeInfo` structure.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"penalizeRelayManager(address,address,uint256)\":{\"params\":{\"amount\":\"A total amount of penalty to be withdrawn from stake.\",\"beneficiary\":\"The address that receives part of the penalty amount.\",\"relayManager\":\"The address of a Relay Manager to be penalized.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRelayManagerOwner(address)\":{\"params\":{\"owner\":\"- owner of the relay (as configured off-chain)\"}},\"stakeForRelayManager(address,address,uint256,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to be taken from the relayOwner and locked in the StakeManager as a stake\",\"relayManager\":\"The address that represents a stake entry and controls relay registrations on relay hubs\",\"token\":\"The address of an ERC-20 token that is used by the relayManager as a stake\",\"unstakeDelay\":\"The number of seconds to elapse before an owner can retrieve the stake after calling `unlock`\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unauthorizeHubByOwner(address,address)\":{\"params\":{\"relayHub\":\"The address of a `RelayHub` to be unauthorized.\",\"relayManager\":\"The address of a Relay Manager.\"}},\"unlockStake(address)\":{\"params\":{\"relayManager\":\"The address of a Relay Manager whose stake is to be unlocked.\"}},\"withdrawStake(address)\":{\"params\":{\"relayManager\":\"The address of a Relay Manager whose stake is to be withdrawn.\"}}},\"stateVariables\":{\"versionSM\":{\"return\":\"a SemVer-compliant version of the `StakeManager` contract.\",\"returns\":{\"_0\":\"a SemVer-compliant version of the `StakeManager` contract.\"}}},\"title\":\"The StakeManager implementation\",\"version\":1},\"userdoc\":{\"events\":{\"BurnAddressSet(address)\":{\"notice\":\"Emitted when a `burnAddress` is changed.\"},\"HubAuthorized(address,address)\":{\"notice\":\"Emitted when a `relayManager` adds a new `RelayHub` to a list of authorized.\"},\"HubUnauthorized(address,address,uint256)\":{\"notice\":\"Emitted when a `relayManager` removes a `RelayHub` from a list of authorized.\"},\"OwnerSet(address,address)\":{\"notice\":\"Emitted when a `relayManager` sets its `owner`. This is necessary to prevent stake hijacking.\"},\"StakeAdded(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a `stake` or `unstakeDelay` are initialized or increased.\"},\"StakePenalized(address,address,address,uint256)\":{\"notice\":\"Emitted when an authorized `RelayHub` penalizes a `relayManager`.\"},\"StakeUnlocked(address,address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal.\"},\"StakeWithdrawn(address,address,address,uint256)\":{\"notice\":\"Emitted when owner withdraws `relayManager` funds.\"}},\"kind\":\"user\",\"methods\":{\"authorizeHubByManager(address)\":{\"notice\":\"Same as `authorizeHubByOwner` but can be called by the RelayManager itself.\"},\"authorizeHubByOwner(address,address)\":{\"notice\":\"Add the `RelayHub` to a list of authorized by this Relay Manager. This allows the RelayHub to penalize this Relay Manager. The `RelayHub` cannot trust a Relay it cannot penalize.\"},\"authorizedHubs(address,address)\":{\"notice\":\"maps relay managers to a map of addressed of their authorized hubs to the information on that hub\"},\"getStakeInfo(address)\":{\"notice\":\"Get the stake details information for the given Relay Manager.\"},\"penalizeRelayManager(address,address,uint256)\":{\"notice\":\"Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns part of stake on the way.\"},\"setBurnAddress(address)\":{\"notice\":\"Change the address that will receive the 'burned' part of the penalized stake. This is done to prevent malicious Relay Server from penalizing itself and breaking even.\"},\"setRelayManagerOwner(address)\":{\"notice\":\"Set the owner of a Relay Manager. Called only by the RelayManager itself. Note that owners cannot transfer ownership - if the entry already exists, reverts.\"},\"stakeForRelayManager(address,address,uint256,uint256)\":{\"notice\":\"Put a stake for a relayManager and set its unstake delay. Only the owner can call this function. If the entry does not exist, reverts. The owner must give allowance of the ERC-20 token to the StakeManager before calling this method. It is the RelayHub who has a configurable list of minimum stakes per token. StakeManager accepts all tokens.\"},\"stakes(address)\":{\"notice\":\"maps relay managers to their stakes\"},\"unauthorizeHubByManager(address)\":{\"notice\":\"Same as `unauthorizeHubByOwner` but can be called by the RelayManager itself.\"},\"unauthorizeHubByOwner(address,address)\":{\"notice\":\"Remove the `RelayHub` from a list of authorized by this Relay Manager.\"},\"unlockStake(address)\":{\"notice\":\"Schedule the unlocking of the stake. The `unstakeDelay` must pass before owner can call `withdrawStake`.\"},\"withdrawStake(address)\":{\"notice\":\"Withdraw the unlocked stake.\"}},\"notice\":\"An IStakeManager instance that accepts stakes in any ERC-20 token.Single StakeInfo of a single RelayManager can only have one token address assigned to it.It cannot be changed after the first time 'stakeForRelayManager' is called as it is equivalent to withdrawal.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts-link/StakeManager.sol\":\"StakeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts-link/StakeManager.sol\":{\"content\":\"pragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n// solhint-disable not-rely-on-time\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\nimport \\\"./interfaces/IRelayHub.sol\\\";\\n\\n/**\\n * @title The StakeManager implementation\\n * @notice An IStakeManager instance that accepts stakes in any ERC-20 token.\\n *\\n * @notice Single StakeInfo of a single RelayManager can only have one token address assigned to it.\\n *\\n * @notice It cannot be changed after the first time 'stakeForRelayManager' is called as it is equivalent to withdrawal.\\n */\\ncontract StakeManager is IStakeManager, Ownable {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    string public override versionSM = \\\"3.0.0-alpha.3+opengsn.stakemanager.istakemanager\\\";\\n    uint256 internal immutable maxUnstakeDelay;\\n\\n    address internal burnAddress;\\n    uint256 internal immutable creationBlock;\\n\\n    /// maps relay managers to their stakes\\n    mapping(address => StakeInfo) public stakes;\\n\\n    /// @inheritdoc IStakeManager\\n    function getStakeInfo(address relayManager) external override view returns (StakeInfo memory stakeInfo, bool isSenderAuthorizedHub) {\\n        bool isHubAuthorized = authorizedHubs[relayManager][msg.sender].removalTime == type(uint256).max;\\n        return (stakes[relayManager], isHubAuthorized);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function setBurnAddress(address _burnAddress) public override onlyOwner {\\n        burnAddress = _burnAddress;\\n        emit BurnAddressSet(burnAddress);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function getBurnAddress() external override view returns (address) {\\n        return burnAddress;\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function getMaxUnstakeDelay() external override view returns (uint256) {\\n        return maxUnstakeDelay;\\n    }\\n\\n    /// maps relay managers to a map of addressed of their authorized hubs to the information on that hub\\n    mapping(address => mapping(address => RelayHubInfo)) public authorizedHubs;\\n\\n    constructor(\\n        uint256 _maxUnstakeDelay,\\n        address _burnAddress\\n    ) {\\n        require(_burnAddress != address(0), \\\"transfers to address(0) may fail\\\");\\n        setBurnAddress(_burnAddress);\\n        creationBlock = block.number;\\n        maxUnstakeDelay = _maxUnstakeDelay;\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function getCreationBlock() external override view returns (uint256){\\n        return creationBlock;\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function setRelayManagerOwner(address owner) external override {\\n        require(owner != address(0), \\\"invalid owner\\\");\\n        require(stakes[msg.sender].owner == address(0), \\\"already owned\\\");\\n        stakes[msg.sender].owner = owner;\\n        emit OwnerSet(msg.sender, owner);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function stakeForRelayManager(IERC20 token, address relayManager, uint256 unstakeDelay, uint256 amount) external override relayOwnerOnly(relayManager) {\\n        require(unstakeDelay >= stakes[relayManager].unstakeDelay, \\\"unstakeDelay cannot be decreased\\\");\\n        require(unstakeDelay <= maxUnstakeDelay, \\\"unstakeDelay too big\\\");\\n        require(token != IERC20(address(0)), \\\"must specify stake token address\\\");\\n        require(\\n            stakes[relayManager].token == IERC20(address(0)) ||\\n            stakes[relayManager].token == token,\\n            \\\"stake token address is incorrect\\\");\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n        stakes[relayManager].token = token;\\n        stakes[relayManager].stake += amount;\\n        stakes[relayManager].unstakeDelay = unstakeDelay;\\n        emit StakeAdded(relayManager, stakes[relayManager].owner, stakes[relayManager].token, stakes[relayManager].stake, stakes[relayManager].unstakeDelay);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function unlockStake(address relayManager) external override relayOwnerOnly(relayManager) {\\n        StakeInfo storage info = stakes[relayManager];\\n        require(info.withdrawTime == 0, \\\"already pending\\\");\\n        info.withdrawTime = block.timestamp.add(info.unstakeDelay);\\n        emit StakeUnlocked(relayManager, msg.sender, info.withdrawTime);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function withdrawStake(address relayManager) external override relayOwnerOnly(relayManager) {\\n        StakeInfo storage info = stakes[relayManager];\\n        require(info.withdrawTime > 0, \\\"Withdrawal is not scheduled\\\");\\n        require(info.withdrawTime <= block.timestamp, \\\"Withdrawal is not due\\\");\\n        uint256 amount = info.stake;\\n        info.stake = 0;\\n        info.withdrawTime = 0;\\n        info.token.safeTransfer(msg.sender, amount);\\n        emit StakeWithdrawn(relayManager, msg.sender, info.token, amount);\\n    }\\n\\n    /// @notice Prevents any address other than a registered Relay Owner from calling this method.\\n    modifier relayOwnerOnly (address relayManager) {\\n        StakeInfo storage info = stakes[relayManager];\\n        require(info.owner == msg.sender, \\\"not owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Prevents any address other than a registered Relay Manager from calling this method.\\n    modifier managerOnly () {\\n        StakeInfo storage info = stakes[msg.sender];\\n        require(info.owner != address(0), \\\"not manager\\\");\\n        _;\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function authorizeHubByOwner(address relayManager, address relayHub) external relayOwnerOnly(relayManager) override {\\n        _authorizeHub(relayManager, relayHub);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function authorizeHubByManager(address relayHub) external managerOnly override {\\n        _authorizeHub(msg.sender, relayHub);\\n    }\\n\\n    function _authorizeHub(address relayManager, address relayHub) internal {\\n        authorizedHubs[relayManager][relayHub].removalTime = type(uint256).max;\\n        emit HubAuthorized(relayManager, relayHub);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external override relayOwnerOnly(relayManager) {\\n        _unauthorizeHub(relayManager, relayHub);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function unauthorizeHubByManager(address relayHub) external override managerOnly {\\n        _unauthorizeHub(msg.sender, relayHub);\\n    }\\n\\n    function _unauthorizeHub(address relayManager, address relayHub) internal {\\n        RelayHubInfo storage hubInfo = authorizedHubs[relayManager][relayHub];\\n        require(hubInfo.removalTime == type(uint256).max, \\\"hub not authorized\\\");\\n        hubInfo.removalTime = block.timestamp.add(stakes[relayManager].unstakeDelay);\\n        emit HubUnauthorized(relayManager, relayHub, hubInfo.removalTime);\\n    }\\n\\n    /// @inheritdoc IStakeManager\\n    function penalizeRelayManager(address relayManager, address beneficiary, uint256 amount) external override {\\n        uint256 removalTime = authorizedHubs[relayManager][msg.sender].removalTime;\\n        require(removalTime != 0, \\\"hub not authorized\\\");\\n        require(removalTime > block.timestamp, \\\"hub authorization expired\\\");\\n\\n        // Half of the stake will be burned (sent to address 0)\\n        require(stakes[relayManager].stake >= amount, \\\"penalty exceeds stake\\\");\\n        stakes[relayManager].stake = SafeMath.sub(stakes[relayManager].stake, amount);\\n\\n        uint256 toBurn = SafeMath.div(amount, 2);\\n        uint256 reward = SafeMath.sub(amount, toBurn);\\n\\n        // Stake ERC-20 token is burned and transferred\\n        stakes[relayManager].token.safeTransfer(burnAddress, toBurn);\\n        stakes[relayManager].token.safeTransfer(beneficiary, reward);\\n        emit StakePenalized(relayManager, beneficiary, stakes[relayManager].token, reward);\\n    }\\n}\",\"keccak256\":\"0x910b6feee77fb070049136f6418b6f64a529d9fff8d2d07adb97ffc10a61c9e4\",\"license\":\"GPL-3.0-only\"},\"contracts-link/forwarder/IForwarder.sol\":{\"content\":\"pragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title The Forwarder Interface\\n * @notice The contracts implementing this interface take a role of authorization, authentication and replay protection\\n * for contracts that choose to trust a `Forwarder`, instead of relying on a mechanism built into the Ethereum protocol.\\n *\\n * @notice if the `Forwarder` contract decides that an incoming `ForwardRequest` is valid, it must append 20 bytes that\\n * represent the caller to the `data` field of the request and send this new data to the target address (the `to` field)\\n *\\n * :warning: **Warning** :warning: The Forwarder can have a full control over a `Recipient` contract.\\n * Any vulnerability in a `Forwarder` implementation can make all of its `Recipient` contracts susceptible!\\n * Recipient contracts should only trust forwarders that passed through security audit,\\n * otherwise they are susceptible to identity theft.\\n */\\ninterface IForwarder is IERC165 {\\n\\n    /**\\n     * @notice A representation of a request for a `Forwarder` to send `data` on behalf of a `from` to a target (`to`).\\n     */\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n        uint256 validUntilTime;\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n    /**\\n     * @param from The address of a sender.\\n     * @return The nonce for this address.\\n     */\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * @notice Verify the transaction is valid and can be executed.\\n     * Implementations must validate the signature and the nonce of the request are correct.\\n     * Does not revert and returns successfully if the input is valid.\\n     * Reverts if any validation has failed. For instance, if either signature or nonce are incorrect.\\n     * Reverts if `domainSeparator` or `requestTypeHash` are not registered as well.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * @notice Executes a transaction specified by the `ForwardRequest`.\\n     * The transaction is first verified and then executed.\\n     * The success flag and returned bytes array of the `CALL` are returned as-is.\\n     *\\n     * This method would revert only in case of a verification error.\\n     *\\n     * All the target errors are reported using the returned success flag and returned bytes array.\\n     *\\n     * @param forwardRequest All requested transaction parameters.\\n     * @param domainSeparator The domain used when signing this request.\\n     * @param requestTypeHash The request type used when signing this request.\\n     * @param suffixData The ABI-encoded extension data for the current `RequestType` used when signing this request.\\n     * @param signature The client signature to be validated.\\n     *\\n     * @return success The success flag of the underlying `CALL` to the target address.\\n     * @return ret The byte array returned by the underlying `CALL` to the target address.\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * @notice Register a new Request typehash.\\n     *\\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\\n     *\\n     * @param typeName The name of the request type.\\n     * @param typeSuffix Any extra data after the generic params. Must contain add at least one param.\\n     * The generic ForwardRequest type is always registered by the constructor.\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * @notice Register a new domain separator.\\n     *\\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\\n     *\\n     * @notice The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`.\\n     * The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address.\\n     * This method accepts the domain name and version to create and register the domain separator value.\\n     * @param name The domain's display name.\\n     * @param version The domain/protocol version.\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\",\"keccak256\":\"0xef3d770001c3245db4408cdd0afdfc622695ccfe31f28b74571d05158bbf83f8\",\"license\":\"GPL-3.0-only\"},\"contracts-link/interfaces/IRelayHub.sol\":{\"content\":\"pragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\nimport \\\"../utils/GsnTypes.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\n\\n/**\\n * @title The RelayHub interface\\n * @notice The implementation of this interface provides all the information the GSN client needs to\\n * create a valid `RelayRequest` and also serves as an entry point for such requests.\\n *\\n * @notice The RelayHub also handles all the related financial records and hold the balances of participants.\\n * The Paymasters keep their Ether deposited in the `RelayHub` in order to pay for the `RelayRequest`s that thay choose\\n * to pay for, and Relay Servers keep their earned Ether in the `RelayHub` until they choose to `withdraw()`\\n *\\n * @notice The RelayHub on each supported network only needs a single instance and there is usually no need for dApp\\n * developers or Relay Server operators to redeploy, reimplement, modify or override the `RelayHub`.\\n */\\ninterface IRelayHub is IERC165 {\\n    /**\\n     * @notice A struct that contains all the parameters of the `RelayHub` that can be modified after the deployment.\\n     */\\n    struct RelayHubConfig {\\n        // maximum number of worker accounts allowed per manager\\n        uint256 maxWorkerCount;\\n        // Gas set aside for all relayCall() instructions to prevent unexpected out-of-gas exceptions\\n        uint256 gasReserve;\\n        // Gas overhead to calculate gasUseWithoutPost\\n        uint256 postOverhead;\\n        // Gas cost of all relayCall() instructions after actual 'calculateCharge()'\\n        // Assume that relay has non-zero balance (costs 15'000 more otherwise).\\n        uint256 gasOverhead;\\n        // Minimum unstake delay seconds of a relay manager's stake on the StakeManager\\n        uint256 minimumUnstakeDelay;\\n        // Developers address\\n        address devAddress;\\n        // 0 < fee < 100, as percentage of total charge from paymaster to relayer\\n        uint8 devFee;\\n\\n    }\\n\\n    /// @notice Emitted when a configuration of the `RelayHub` is changed\\n    event RelayHubConfigured(RelayHubConfig config);\\n\\n    /// @notice Emitted when relays are added by a relayManager\\n    event RelayWorkersAdded(\\n        address indexed relayManager,\\n        address[] newRelayWorkers,\\n        uint256 workersCount\\n    );\\n\\n    /// @notice Emitted when an account withdraws funds from the `RelayHub`.\\n    event Withdrawn(\\n        address indexed account,\\n        address indexed dest,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when `depositFor` is called, including the amount and account that was funded.\\n    event Deposited(\\n        address indexed paymaster,\\n        address indexed from,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted for each token configured for staking in setMinimumStakes\\n    event StakingTokenDataChanged(\\n        address token,\\n        uint256 minimumStake\\n    );\\n\\n    /**\\n     * @notice Emitted when an attempt to relay a call fails and the `Paymaster` does not accept the transaction.\\n     * The actual relayed call was not executed, and the recipient not charged.\\n     * @param reason contains a revert reason returned from preRelayedCall or forwarder.\\n     */\\n    event TransactionRejectedByPaymaster(\\n        address indexed relayManager,\\n        address indexed paymaster,\\n        bytes32 indexed relayRequestID,\\n        address from,\\n        address to,\\n        address relayWorker,\\n        bytes4 selector,\\n        uint256 innerGasUsed,\\n        bytes reason\\n    );\\n\\n    /**\\n     * @notice Emitted when a transaction is relayed. Note that the actual internal function call might be reverted.\\n     * The reason for a revert will be indicated in the `status` field of a corresponding `RelayCallStatus` value.\\n     * @notice `charge` is the Ether value deducted from the `Paymaster` balance.\\n     * The amount added to the `relayManager` balance will be lower if there is an activated `devFee` in the `config`.\\n     */\\n    event TransactionRelayed(\\n        address indexed relayManager,\\n        address indexed relayWorker,\\n        bytes32 indexed relayRequestID,\\n        address from,\\n        address to,\\n        address paymaster,\\n        bytes4 selector,\\n        RelayCallStatus status,\\n        uint256 charge\\n    );\\n\\n    /// @notice This event is emitted in case the internal function returns a value or reverts with a revert string.\\n    event TransactionResult(\\n        RelayCallStatus status,\\n        bytes returnValue\\n    );\\n\\n    /// @notice This event is emitted in case this `RelayHub` is deprecated and will stop serving transactions soon.\\n    event HubDeprecated(uint256 deprecationTime);\\n\\n    /**\\n     * Error codes that describe all possible failure reasons reported in the `TransactionRelayed` event `status` field.\\n     *  @param OK The transaction was successfully relayed and execution successful - never included in the event.\\n     *  @param RelayedCallFailed The transaction was relayed, but the relayed call failed.\\n     *  @param RejectedByPreRelayed The transaction was not relayed due to preRelatedCall reverting.\\n     *  @param RejectedByForwarder The transaction was not relayed due to forwarder check (signature,nonce).\\n     *  @param PostRelayedFailed The transaction was relayed and reverted due to postRelatedCall reverting.\\n     *  @param PaymasterBalanceChanged The transaction was relayed and reverted due to the paymaster balance change.\\n     */\\n    enum RelayCallStatus {\\n        OK,\\n        RelayedCallFailed,\\n        RejectedByPreRelayed,\\n        RejectedByForwarder,\\n        RejectedByRecipientRevert,\\n        PostRelayedFailed,\\n        PaymasterBalanceChanged\\n    }\\n\\n    /**\\n     * @notice Add new worker addresses controlled by the sender who must be a staked Relay Manager address.\\n     * Emits a `RelayWorkersAdded` event.\\n     * This function can be called multiple times, emitting new events.\\n     */\\n    function addRelayWorkers(address[] calldata newRelayWorkers) external;\\n\\n    function verifyCanRegister(address relayManager) external;\\n\\n    // Balance management\\n\\n    /**\\n     * @notice Deposits ether for a `Paymaster`, so that it can and pay for relayed transactions.\\n     * :warning: **Warning** :warning: Unused balance can only be withdrawn by the holder itself, by calling `withdraw`.\\n     * Emits a `Deposited` event.\\n     */\\n    function depositFor(address target) external payable;\\n\\n    /**\\n     * @notice Withdraws from an account's balance, sending it back to the caller.\\n     * Relay Managers call this to retrieve their revenue, and `Paymasters` can also use it to reduce their funding.\\n     * Emits a `Withdrawn` event.\\n     */\\n    function withdraw(uint256 amount, address payable dest) external;\\n\\n    // Relaying\\n\\n    /**\\n     * @notice Relays a transaction. For this to succeed, multiple conditions must be met:\\n     *  - `Paymaster`'s `preRelayCall` method must succeed and not revert.\\n     *  - the `msg.sender` must be a registered Relay Worker that the user signed to use.\\n     *  - the transaction's gas fees must be equal or larger than the ones that were signed by the sender.\\n     *  - the transaction must have enough gas to run all internal transactions if they use all gas available to them.\\n     *  - the `Paymaster` must have enough balance to pay the Relay Worker if all gas is spent.\\n     *\\n     * @notice If all conditions are met, the call will be relayed and the `Paymaster` charged.\\n     *\\n     * @param maxAcceptanceBudget The maximum valid value for `paymaster.getGasLimits().acceptanceBudget` to return.\\n     * @param relayRequest All details of the requested relayed call.\\n     * @param signature The client's EIP-712 signature over the `relayRequest` struct.\\n     * @param approvalData The dapp-specific data forwarded to the `Paymaster`'s `preRelayedCall` method.\\n     * This value is **not** verified by the `RelayHub` in any way.\\n     * As an example, it can be used to pass some kind of a third-party signature to the `Paymaster` for verification.\\n     *\\n     * Emits a `TransactionRelayed` event regardless of whether the transaction succeeded or failed.\\n     */\\n    function relayCall(\\n        uint256 maxAcceptanceBudget,\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData\\n    )\\n    external\\n    returns (bool paymasterAccepted, bytes memory returnValue);\\n\\n    /**\\n     * @notice In case the Relay Worker has been found to be in violation of some rules by the `Penalizer` contract,\\n     * the `Penalizer` will call this method to execute a penalization.\\n     * The `RelayHub` will look up the Relay Manager of the given Relay Worker and will forward the call to\\n     * the `StakeManager` contract. The `RelayHub` does not perform the actual penalization either.\\n     * @param relayWorker The address of the Relay Worker that committed a penalizable offense.\\n     * @param beneficiary The address that called the `Penalizer` and will receive a reward for it.\\n     */\\n    function penalize(address relayWorker, address payable beneficiary) external;\\n\\n    /**\\n     * @notice Sets or changes the configuration of this `RelayHub`.\\n     * @param _config The new configuration.\\n     */\\n    function setConfiguration(RelayHubConfig memory _config) external;\\n\\n    /**\\n     * @notice Sets or changes the minimum amount of a given `token` that needs to be staked so that the Relay Manager\\n     * is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking.\\n     * @param token An array of addresses of ERC-20 compatible tokens.\\n     * @param minimumStake An array of minimal amounts necessary for a corresponding token, in wei.\\n     */\\n    function setMinimumStakes(IERC20[] memory token, uint256[] memory minimumStake) external;\\n\\n    /**\\n     * @notice Deprecate hub by reverting all incoming `relayCall()` calls starting from a given timestamp\\n     * @param _deprecationTime The timestamp in seconds after which the `RelayHub` stops serving transactions.\\n     */\\n    function deprecateHub(uint256 _deprecationTime) external;\\n\\n    /**\\n     * @notice The fee is expressed as a base fee in wei plus percentage of the actual charge.\\n     * For example, a value '40' stands for a 40% fee, so the recipient will be charged for 1.4 times the spent amount.\\n     * @param gasUsed An amount of gas used by the transaction.\\n     * @param relayData The details of a transaction signed by the sender.\\n     * @return The calculated charge, in wei.\\n     */\\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) external view returns (uint256);\\n\\n    /**\\n     * @notice The fee is expressed as a  percentage of the actual charge.\\n     * For example, a value '40' stands for a 40% fee, so the Relay Manager will only get 60% of the `charge`.\\n     * @param charge The amount of Ether in wei the Paymaster will be charged for this transaction.\\n     * @return The calculated devFee, in wei.\\n     */\\n    function calculateDevCharge(uint256 charge) external view returns (uint256);\\n    /* getters */\\n\\n    /// @return config The configuration of the `RelayHub`.\\n    function getConfiguration() external view returns (RelayHubConfig memory config);\\n\\n    /**\\n     * @param token An address of an ERC-20 compatible tokens.\\n     * @return The minimum amount of a given `token` that needs to be staked so that the Relay Manager\\n     * is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking.\\n     */\\n    function getMinimumStakePerToken(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @param worker An address of the Relay Worker.\\n     * @return The address of its Relay Manager.\\n     */\\n    function getWorkerManager(address worker) external view returns (address);\\n\\n    /**\\n     * @param manager An address of the Relay Manager.\\n     * @return The count of Relay Workers associated with this Relay Manager.\\n     */\\n    function getWorkerCount(address manager) external view returns (uint256);\\n\\n    /// @return An account's balance. It can be either a deposit of a `Paymaster`, or a revenue of a Relay Manager.\\n    function balanceOf(address target) external view returns (uint256);\\n\\n    /// @return The `StakeManager` address for this `RelayHub`.\\n    function getStakeManager() external view returns (IStakeManager);\\n\\n    /// @return The `Penalizer` address for this `RelayHub`.\\n    function getPenalizer() external view returns (address);\\n\\n    /// @return The `RelayRegistrar` address for this `RelayHub`.\\n    function getRelayRegistrar() external view returns (address);\\n\\n    /// @return The `BatchGateway` address for this `RelayHub`.\\n    function getBatchGateway() external view returns (address);\\n\\n    /**\\n     * @notice Uses `StakeManager` to decide if the Relay Manager can be considered staked or not.\\n     * Returns if the stake's token, amount and delay satisfy all requirements, reverts otherwise.\\n     */\\n    function verifyRelayManagerStaked(address relayManager) external view;\\n\\n    /// @return `true` if the `RelayHub` is deprecated, `false` it it is not deprecated and can serve transactions.\\n    function isDeprecated() external view returns (bool);\\n\\n    /// @return The timestamp from which the hub no longer allows relaying calls.\\n    function getDeprecationTime() external view returns (uint256);\\n\\n    /// @return The block number in which the contract has been deployed.\\n    function getCreationBlock() external view returns (uint256);\\n\\n    /// @return a SemVer-compliant version of the `RelayHub` contract.\\n    function versionHub() external view returns (string memory);\\n\\n    /// @return A total measurable amount of gas left to current execution. Same as 'gasleft()' for pure EVMs.\\n    function aggregateGasleft() external view returns (uint256);\\n}\",\"keccak256\":\"0x1deca98ec75598091bf5d5ce7bd2720619d4f1bbede2f0357b08cf5d6ec19318\",\"license\":\"GPL-3.0-only\"},\"contracts-link/interfaces/IStakeManager.sol\":{\"content\":\"pragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title The StakeManager Interface\\n * @notice In order to prevent an attacker from registering a large number of unresponsive relays, the GSN requires\\n * the Relay Server to maintain a permanently locked stake in the system before being able to register.\\n *\\n * @notice Also, in some cases the behavior of a Relay Server may be found to be illegal by a `Penalizer` contract.\\n * In such case, the stake will never be returned to the Relay Server operator and will be slashed.\\n *\\n * @notice An implementation of this interface is tasked with keeping Relay Servers' stakes, made in any ERC-20 token.\\n * Note that the `RelayHub` chooses which ERC-20 tokens to support and how much stake is needed.\\n */\\ninterface IStakeManager {\\n\\n    /// @notice Emitted when a `stake` or `unstakeDelay` are initialized or increased.\\n    event StakeAdded(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 stake,\\n        uint256 unstakeDelay\\n    );\\n\\n    /// @notice Emitted once a stake is scheduled for withdrawal.\\n    event StakeUnlocked(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 withdrawTime\\n    );\\n\\n    /// @notice Emitted when owner withdraws `relayManager` funds.\\n    event StakeWithdrawn(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when an authorized `RelayHub` penalizes a `relayManager`.\\n    event StakePenalized(\\n        address indexed relayManager,\\n        address indexed beneficiary,\\n        IERC20 token,\\n        uint256 reward\\n    );\\n\\n    /// @notice Emitted when a `relayManager` adds a new `RelayHub` to a list of authorized.\\n    event HubAuthorized(\\n        address indexed relayManager,\\n        address indexed relayHub\\n    );\\n\\n    /// @notice Emitted when a `relayManager` removes a `RelayHub` from a list of authorized.\\n    event HubUnauthorized(\\n        address indexed relayManager,\\n        address indexed relayHub,\\n        uint256 removalTime\\n    );\\n\\n    /// @notice Emitted when a `relayManager` sets its `owner`. This is necessary to prevent stake hijacking.\\n    event OwnerSet(\\n        address indexed relayManager,\\n        address indexed owner\\n    );\\n\\n    /// @notice Emitted when a `burnAddress` is changed.\\n    event BurnAddressSet(\\n        address indexed burnAddress\\n    );\\n\\n    /**\\n     * @param stake - amount of ether staked for this relay\\n     * @param unstakeDelay - number of seconds to elapse before the owner can retrieve the stake after calling 'unlock'\\n     * @param withdrawTime - timestamp in seconds when 'withdraw' will be callable, or zero if the unlock has not been called\\n     * @param owner - address that receives revenue and manages relayManager's stake\\n     */\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelay;\\n        uint256 withdrawTime;\\n        IERC20 token;\\n        address owner;\\n    }\\n\\n    struct RelayHubInfo {\\n        uint256 removalTime;\\n    }\\n\\n    /**\\n     * @notice Set the owner of a Relay Manager. Called only by the RelayManager itself.\\n     * Note that owners cannot transfer ownership - if the entry already exists, reverts.\\n     * @param owner - owner of the relay (as configured off-chain)\\n     */\\n    function setRelayManagerOwner(address owner) external;\\n\\n    /**\\n     * @notice Put a stake for a relayManager and set its unstake delay.\\n     * Only the owner can call this function. If the entry does not exist, reverts.\\n     * The owner must give allowance of the ERC-20 token to the StakeManager before calling this method.\\n     * It is the RelayHub who has a configurable list of minimum stakes per token. StakeManager accepts all tokens.\\n     * @param token The address of an ERC-20 token that is used by the relayManager as a stake\\n     * @param relayManager The address that represents a stake entry and controls relay registrations on relay hubs\\n     * @param unstakeDelay The number of seconds to elapse before an owner can retrieve the stake after calling `unlock`\\n     * @param amount The amount of tokens to be taken from the relayOwner and locked in the StakeManager as a stake\\n     */\\n    function stakeForRelayManager(IERC20 token, address relayManager, uint256 unstakeDelay, uint256 amount) external;\\n\\n    /**\\n     * @notice Schedule the unlocking of the stake. The `unstakeDelay` must pass before owner can call `withdrawStake`.\\n     * @param relayManager The address of a Relay Manager whose stake is to be unlocked.\\n     */\\n    function unlockStake(address relayManager) external;\\n    /**\\n     * @notice Withdraw the unlocked stake.\\n     * @param relayManager The address of a Relay Manager whose stake is to be withdrawn.\\n     */\\n    function withdrawStake(address relayManager) external;\\n\\n    /**\\n     * @notice Add the `RelayHub` to a list of authorized by this Relay Manager.\\n     * This allows the RelayHub to penalize this Relay Manager. The `RelayHub` cannot trust a Relay it cannot penalize.\\n     * @param relayManager The address of a Relay Manager whose stake is to be authorized for the new `RelayHub`.\\n     * @param relayHub The address of a `RelayHub` to be authorized.\\n     */\\n    function authorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    /**\\n     * @notice Same as `authorizeHubByOwner` but can be called by the RelayManager itself.\\n     */\\n    function authorizeHubByManager(address relayHub) external;\\n\\n    /**\\n     * @notice Remove the `RelayHub` from a list of authorized by this Relay Manager.\\n     * @param relayManager The address of a Relay Manager.\\n     * @param relayHub The address of a `RelayHub` to be unauthorized.\\n     */\\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    /**\\n     * @notice Same as `unauthorizeHubByOwner` but can be called by the RelayManager itself.\\n     */\\n    function unauthorizeHubByManager(address relayHub) external;\\n\\n    /**\\n     * Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns part of stake on the way.\\n     * @param relayManager The address of a Relay Manager to be penalized.\\n     * @param beneficiary The address that receives part of the penalty amount.\\n     * @param amount A total amount of penalty to be withdrawn from stake.\\n     */\\n    function penalizeRelayManager(address relayManager, address beneficiary, uint256 amount) external;\\n\\n    /**\\n     * @notice Get the stake details information for the given Relay Manager.\\n     * @param relayManager The address of a Relay Manager.\\n     * @return stakeInfo The `StakeInfo` structure.\\n     * @return isSenderAuthorizedHub `true` if the `msg.sender` for this call was a `RelayHub` that is authorized now.\\n     * `false` if the `msg.sender` for this call is not authorized.\\n     */\\n    function getStakeInfo(address relayManager) external view returns (StakeInfo memory stakeInfo, bool isSenderAuthorizedHub);\\n\\n    /**\\n     * @return The maximum unstake delay this `StakeManger` allows. This is to prevent locking money forever by mistake.\\n     */\\n    function getMaxUnstakeDelay() external view returns (uint256);\\n\\n    /**\\n     * @notice Change the address that will receive the 'burned' part of the penalized stake.\\n     * This is done to prevent malicious Relay Server from penalizing itself and breaking even.\\n     */\\n    function setBurnAddress(address _burnAddress) external;\\n\\n    /**\\n     * @return The address that will receive the 'burned' part of the penalized stake.\\n     */\\n    function getBurnAddress() external view returns (address);\\n\\n    /**\\n     * @return the block number in which the contract has been deployed.\\n     */\\n    function getCreationBlock() external view returns (uint256);\\n\\n    /**\\n     * @return a SemVer-compliant version of the `StakeManager` contract.\\n     */\\n    function versionSM() external view returns (string memory);\\n}\",\"keccak256\":\"0xfa36dc58dc75bdc830127c1230d0330df20107e1648fe3fc53fa5406eae26ec7\",\"license\":\"GPL-3.0-only\"},\"contracts-link/utils/GsnTypes.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../forwarder/IForwarder.sol\\\";\\n\\ninterface GsnTypes {\\n    /// @notice maxFeePerGas, maxPriorityFeePerGas, pctRelayFee and baseRelayFee must be validated inside of the paymaster's preRelayedCall in order not to overpay\\n    struct RelayData {\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        uint256 pctRelayFee;\\n        uint256 baseRelayFee;\\n        uint256 transactionCalldataGasUsed;\\n        address relayWorker;\\n        address paymaster;\\n        address forwarder;\\n        bytes paymasterData;\\n        uint256 clientId;\\n    }\\n\\n    //note: must start with the ForwardRequest to be an extension of the generic forwarder\\n    struct RelayRequest {\\n        IForwarder.ForwardRequest request;\\n        RelayData relayData;\\n    }\\n}\",\"keccak256\":\"0x3724fd8d48d2a89cfa65993cd99115a93828d090597cd8bc197bb2d46bc76315\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610120604052603060c08181529062001a8660e03980516200002a91600191602090910190620001d1565b503480156200003857600080fd5b5060405162001ab638038062001ab68339810160408190526200005b9162000277565b6200006633620000db565b6001600160a01b038116620000c25760405162461bcd60e51b815260206004820181905260248201527f7472616e736665727320746f2061646472657373283029206d6179206661696c60448201526064015b60405180910390fd5b620000cd816200012b565b504360a052608052620002f3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001875760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620000b9565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fb0d2ad16ddd4d3dd008ebff0b7e7699bbfa920003cb0764acb871951d1cd499990600090a250565b828054620001df90620002b6565b90600052602060002090601f0160209004810192826200020357600085556200024e565b82601f106200021e57805160ff19168380011785556200024e565b828001600101855582156200024e579182015b828111156200024e57825182559160200191906001019062000231565b506200025c92915062000260565b5090565b5b808211156200025c576000815560010162000261565b600080604083850312156200028b57600080fd5b825160208401519092506001600160a01b0381168114620002ab57600080fd5b809150509250929050565b600181811c90821680620002cb57607f821691505b60208210811415620002ed57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a0516117666200032060003960006101df0152600081816102c601526106a101526117666000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80637aeb642a116100ad578063d48a9d4311610071578063d48a9d4314610362578063f2fde38b14610375578063f48f8ac714610388578063f9bce3111461039b578063fece3dd4146103ae57600080fd5b80637aeb642a146102885780638da5cb5b146102b3578063afcb7752146102c4578063c23a5cea146102ea578063c3453153146102fd57600080fd5b806347116c6e116100f457806347116c6e146102325780634a1ce599146102475780634b0e72161461025a578063715018a61461026d5780637835d2961461027557600080fd5b806309a08af41461013157806314080fac1461014657806316934fc41461015957806320ffd56d146101dd57806338b39d291461020d575b600080fd5b61014461013f3660046114fd565b6103c1565b005b610144610154366004611560565b6105f5565b6101a46101673660046114a7565b6003602081905260009182526040909120805460018201546002830154938301546004909301549193909290916001600160a01b03918216911685565b604080519586526020860194909452928401919091526001600160a01b03908116606084015216608082015260a0015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016101d4565b6002546001600160a01b03165b6040516001600160a01b0390911681526020016101d4565b61023a6108c3565b6040516101d491906115c2565b6101446102553660046114a7565b610951565b6101446102683660046114a7565b610a49565b610144610abd565b6101446102833660046114c4565b610af3565b6101ff6102963660046114c4565b600460209081526000928352604080842090915290825290205481565b6000546001600160a01b031661021a565b7f00000000000000000000000000000000000000000000000000000000000000006101ff565b6101446102f83660046114a7565b610b42565b61031061030b3660046114a7565b610caf565b60408051835181526020808501519082015283820151918101919091526060808401516001600160a01b03908116918301919091526080938401511692810192909252151560a082015260c0016101d4565b6101446103703660046114a7565b610d6a565b6101446103833660046114a7565b610dcf565b6101446103963660046114c4565b610e6a565b6101446103a93660046114a7565b610eb3565b6101446103bc3660046114a7565b610f14565b6001600160a01b03831660009081526004602090815260408083203384529091529020548061042c5760405162461bcd60e51b81526020600482015260126024820152711a1d58881b9bdd08185d5d1a1bdc9a5e995960721b60448201526064015b60405180910390fd5b42811161047b5760405162461bcd60e51b815260206004820152601960248201527f68756220617574686f72697a6174696f6e2065787069726564000000000000006044820152606401610423565b6001600160a01b0384166000908152600360205260409020548211156104db5760405162461bcd60e51b815260206004820152601560248201527470656e616c74792065786365656473207374616b6560581b6044820152606401610423565b6001600160a01b0384166000908152600360205260409020546104fe908361100d565b6001600160a01b038516600090815260036020526040812091909155610525836002611020565b90506000610533848361100d565b6002546001600160a01b038881166000908152600360208190526040909120015492935061056592811691168461102c565b6001600160a01b038087166000908152600360208190526040909120015461058f9116868361102c565b6001600160a01b038681166000818152600360208181526040928390209091015482519085168152908101859052928816927f2da6b6c9084d39eeb104d765e33a4e16c8762e01b37383b75202d17515d1b82b91015b60405180910390a3505050505050565b6001600160a01b038084166000908152600360205260409020600481015485921633146106345760405162461bcd60e51b81526004016104239061162a565b6001600160a01b03851660009081526003602052604090206001015484101561069f5760405162461bcd60e51b815260206004820181905260248201527f756e7374616b6544656c61792063616e6e6f74206265206465637265617365646044820152606401610423565b7f00000000000000000000000000000000000000000000000000000000000000008411156107065760405162461bcd60e51b8152602060048201526014602482015273756e7374616b6544656c617920746f6f2062696760601b6044820152606401610423565b6001600160a01b03861661075c5760405162461bcd60e51b815260206004820181905260248201527f6d7573742073706563696679207374616b6520746f6b656e20616464726573736044820152606401610423565b6001600160a01b03858116600090815260036020819052604090912001541615806107a757506001600160a01b03858116600090815260036020819052604090912001548116908716145b6107f35760405162461bcd60e51b815260206004820181905260248201527f7374616b6520746f6b656e206164647265737320697320696e636f72726563746044820152606401610423565b6108086001600160a01b038716333086611094565b6001600160a01b038581166000908152600360208190526040822090810180546001600160a01b031916938a169390931790925581548592919061084d90849061164d565b90915550506001600160a01b03858116600081815260036020818152604092839020600181018a905560048101549281015490548451918716825291810191909152918201889052909216917ff83af4359c42f5104d95351ec3dd5e88f5344bc7eaea8de052c9b0d5254808fc906060016105e5565b600180546108d0906116ca565b80601f01602080910402602001604051908101604052809291908181526020018280546108fc906116ca565b80156109495780601f1061091e57610100808354040283529160200191610949565b820191906000526020600020905b81548152906001019060200180831161092c57829003601f168201915b505050505081565b6001600160a01b038082166000908152600360205260409020600481015483921633146109905760405162461bcd60e51b81526004016104239061162a565b6001600160a01b03831660009081526003602052604090206002810154156109ec5760405162461bcd60e51b815260206004820152600f60248201526e616c72656164792070656e64696e6760881b6044820152606401610423565b60018101546109fc9042906110cc565b6002820181905560405190815233906001600160a01b038616907f9ffc6168de1eb7f1d16200f614753cd7edce5a2186aab1c612199dd7316cd7c49060200160405180910390a350505050565b6000546001600160a01b03163314610a735760405162461bcd60e51b8152600401610423906115f5565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fb0d2ad16ddd4d3dd008ebff0b7e7699bbfa920003cb0764acb871951d1cd499990600090a250565b6000546001600160a01b03163314610ae75760405162461bcd60e51b8152600401610423906115f5565b610af160006110d8565b565b6001600160a01b03808316600090815260036020526040902060048101548492163314610b325760405162461bcd60e51b81526004016104239061162a565b610b3c8484611128565b50505050565b6001600160a01b03808216600090815260036020526040902060048101548392163314610b815760405162461bcd60e51b81526004016104239061162a565b6001600160a01b03831660009081526003602052604090206002810154610bea5760405162461bcd60e51b815260206004820152601b60248201527f5769746864726177616c206973206e6f74207363686564756c656400000000006044820152606401610423565b4281600201541115610c365760405162461bcd60e51b81526020600482015260156024820152745769746864726177616c206973206e6f742064756560581b6044820152606401610423565b8054600080835560028301556003820154610c5b906001600160a01b0316338361102c565b6003820154604080516001600160a01b0392831681526020810184905233928816917fddbbe0a4d722dc62b8a415c5e38b88260d0e7a4848cacc83f41fbee40f700168910160405180910390a35050505050565b610cf36040518060a0016040528060008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681525090565b506001600160a01b039081166000818152600460208181526040808420338552825280842054948452600380835293819020815160a0810183528154815260018201549381019390935260028101549183019190915292830154851660608201529101549092166080830152909160001990911490565b33600090815260036020526040902060048101546001600160a01b0316610dc15760405162461bcd60e51b815260206004820152600b60248201526a3737ba1036b0b730b3b2b960a91b6044820152606401610423565b610dcb3383611128565b5050565b6000546001600160a01b03163314610df95760405162461bcd60e51b8152600401610423906115f5565b6001600160a01b038116610e5e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610423565b610e67816110d8565b50565b6001600160a01b03808316600090815260036020526040902060048101548492163314610ea95760405162461bcd60e51b81526004016104239061162a565b610b3c848461117f565b33600090815260036020526040902060048101546001600160a01b0316610f0a5760405162461bcd60e51b815260206004820152600b60248201526a3737ba1036b0b730b3b2b960a91b6044820152606401610423565b610dcb338361117f565b6001600160a01b038116610f5a5760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b21037bbb732b960991b6044820152606401610423565b336000908152600360205260409020600401546001600160a01b031615610fb35760405162461bcd60e51b815260206004820152600d60248201526c185b1c9958591e481bdddb9959609a1b6044820152606401610423565b3360008181526003602052604080822060040180546001600160a01b0319166001600160a01b03861690811790915590519092917f342827c97908e5e2f71151c08502a66d44b6f758e3ac2f1de95f02eb95f0a73591a350565b60006110198284611687565b9392505050565b60006110198284611665565b6040516001600160a01b03831660248201526044810182905261108f90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261125d565b505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610b3c9085906323b872dd60e01b90608401611058565b6000611019828461164d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038083166000818152600460209081526040808320948616808452949091528082206000199055517fe292c4f6e9f34c975f4958cd5650a8111352feae914a67b064079571054210219190a35050565b6001600160a01b0380831660009081526004602090815260408083209385168352929052208054600019146111eb5760405162461bcd60e51b81526020600482015260126024820152711a1d58881b9bdd08185d5d1a1bdc9a5e995960721b6044820152606401610423565b6001600160a01b0383166000908152600360205260409020600101546112129042906110cc565b8082556040519081526001600160a01b0383811691908516907f8d941c9b73ba7e59671a59eed85054004624684182b0e4bdb56c35937bac65a69060200160405180910390a3505050565b60006112b2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661132f9092919063ffffffff16565b80519091501561108f57808060200190518101906112d0919061153e565b61108f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610423565b606061133e8484600085611346565b949350505050565b6060824710156113a75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610423565b843b6113f55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610423565b600080866001600160a01b0316858760405161141191906115a6565b60006040518083038185875af1925050503d806000811461144e576040519150601f19603f3d011682016040523d82523d6000602084013e611453565b606091505b509150915061146382828661146e565b979650505050505050565b6060831561147d575081611019565b82511561148d5782518084602001fd5b8160405162461bcd60e51b815260040161042391906115c2565b6000602082840312156114b957600080fd5b81356110198161171b565b600080604083850312156114d757600080fd5b82356114e28161171b565b915060208301356114f28161171b565b809150509250929050565b60008060006060848603121561151257600080fd5b833561151d8161171b565b9250602084013561152d8161171b565b929592945050506040919091013590565b60006020828403121561155057600080fd5b8151801515811461101957600080fd5b6000806000806080858703121561157657600080fd5b84356115818161171b565b935060208501356115918161171b565b93969395505050506040820135916060013590565b600082516115b881846020870161169e565b9190910192915050565b60208152600082518060208401526115e181604085016020870161169e565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b6000821982111561166057611660611705565b500190565b60008261168257634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561169957611699611705565b500390565b60005b838110156116b95781810151838201526020016116a1565b83811115610b3c5750506000910152565b600181811c908216806116de57607f821691505b602082108114156116ff57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610e6757600080fdfea264697066735822122071e59ebe627c4b1103f81b0fb542dc3fcd710fee1cd2f234b020f951e015af6e64736f6c63430008070033332e302e302d616c7068612e332b6f70656e67736e2e7374616b656d616e616765722e697374616b656d616e61676572",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "authorizeHubByOwner(address,address)": {
        "params": {
          "relayHub": "The address of a `RelayHub` to be authorized.",
          "relayManager": "The address of a Relay Manager whose stake is to be authorized for the new `RelayHub`."
        }
      },
      "getBurnAddress()": {
        "returns": {
          "_0": "The address that will receive the 'burned' part of the penalized stake."
        }
      },
      "getCreationBlock()": {
        "returns": {
          "_0": "the block number in which the contract has been deployed."
        }
      },
      "getMaxUnstakeDelay()": {
        "returns": {
          "_0": "The maximum unstake delay this `StakeManger` allows. This is to prevent locking money forever by mistake."
        }
      },
      "getStakeInfo(address)": {
        "params": {
          "relayManager": "The address of a Relay Manager."
        },
        "returns": {
          "isSenderAuthorizedHub": "`true` if the `msg.sender` for this call was a `RelayHub` that is authorized now. `false` if the `msg.sender` for this call is not authorized.",
          "stakeInfo": "The `StakeInfo` structure."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "penalizeRelayManager(address,address,uint256)": {
        "params": {
          "amount": "A total amount of penalty to be withdrawn from stake.",
          "beneficiary": "The address that receives part of the penalty amount.",
          "relayManager": "The address of a Relay Manager to be penalized."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRelayManagerOwner(address)": {
        "params": {
          "owner": "- owner of the relay (as configured off-chain)"
        }
      },
      "stakeForRelayManager(address,address,uint256,uint256)": {
        "params": {
          "amount": "The amount of tokens to be taken from the relayOwner and locked in the StakeManager as a stake",
          "relayManager": "The address that represents a stake entry and controls relay registrations on relay hubs",
          "token": "The address of an ERC-20 token that is used by the relayManager as a stake",
          "unstakeDelay": "The number of seconds to elapse before an owner can retrieve the stake after calling `unlock`"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unauthorizeHubByOwner(address,address)": {
        "params": {
          "relayHub": "The address of a `RelayHub` to be unauthorized.",
          "relayManager": "The address of a Relay Manager."
        }
      },
      "unlockStake(address)": {
        "params": {
          "relayManager": "The address of a Relay Manager whose stake is to be unlocked."
        }
      },
      "withdrawStake(address)": {
        "params": {
          "relayManager": "The address of a Relay Manager whose stake is to be withdrawn."
        }
      }
    },
    "stateVariables": {
      "versionSM": {
        "return": "a SemVer-compliant version of the `StakeManager` contract.",
        "returns": {
          "_0": "a SemVer-compliant version of the `StakeManager` contract."
        }
      }
    },
    "title": "The StakeManager implementation",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BurnAddressSet(address)": {
        "notice": "Emitted when a `burnAddress` is changed."
      },
      "HubAuthorized(address,address)": {
        "notice": "Emitted when a `relayManager` adds a new `RelayHub` to a list of authorized."
      },
      "HubUnauthorized(address,address,uint256)": {
        "notice": "Emitted when a `relayManager` removes a `RelayHub` from a list of authorized."
      },
      "OwnerSet(address,address)": {
        "notice": "Emitted when a `relayManager` sets its `owner`. This is necessary to prevent stake hijacking."
      },
      "StakeAdded(address,address,address,uint256,uint256)": {
        "notice": "Emitted when a `stake` or `unstakeDelay` are initialized or increased."
      },
      "StakePenalized(address,address,address,uint256)": {
        "notice": "Emitted when an authorized `RelayHub` penalizes a `relayManager`."
      },
      "StakeUnlocked(address,address,uint256)": {
        "notice": "Emitted once a stake is scheduled for withdrawal."
      },
      "StakeWithdrawn(address,address,address,uint256)": {
        "notice": "Emitted when owner withdraws `relayManager` funds."
      }
    },
    "kind": "user",
    "methods": {
      "authorizeHubByManager(address)": {
        "notice": "Same as `authorizeHubByOwner` but can be called by the RelayManager itself."
      },
      "authorizeHubByOwner(address,address)": {
        "notice": "Add the `RelayHub` to a list of authorized by this Relay Manager. This allows the RelayHub to penalize this Relay Manager. The `RelayHub` cannot trust a Relay it cannot penalize."
      },
      "authorizedHubs(address,address)": {
        "notice": "maps relay managers to a map of addressed of their authorized hubs to the information on that hub"
      },
      "getStakeInfo(address)": {
        "notice": "Get the stake details information for the given Relay Manager."
      },
      "penalizeRelayManager(address,address,uint256)": {
        "notice": "Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns part of stake on the way."
      },
      "setBurnAddress(address)": {
        "notice": "Change the address that will receive the 'burned' part of the penalized stake. This is done to prevent malicious Relay Server from penalizing itself and breaking even."
      },
      "setRelayManagerOwner(address)": {
        "notice": "Set the owner of a Relay Manager. Called only by the RelayManager itself. Note that owners cannot transfer ownership - if the entry already exists, reverts."
      },
      "stakeForRelayManager(address,address,uint256,uint256)": {
        "notice": "Put a stake for a relayManager and set its unstake delay. Only the owner can call this function. If the entry does not exist, reverts. The owner must give allowance of the ERC-20 token to the StakeManager before calling this method. It is the RelayHub who has a configurable list of minimum stakes per token. StakeManager accepts all tokens."
      },
      "stakes(address)": {
        "notice": "maps relay managers to their stakes"
      },
      "unauthorizeHubByManager(address)": {
        "notice": "Same as `unauthorizeHubByOwner` but can be called by the RelayManager itself."
      },
      "unauthorizeHubByOwner(address,address)": {
        "notice": "Remove the `RelayHub` from a list of authorized by this Relay Manager."
      },
      "unlockStake(address)": {
        "notice": "Schedule the unlocking of the stake. The `unstakeDelay` must pass before owner can call `withdrawStake`."
      },
      "withdrawStake(address)": {
        "notice": "Withdraw the unlocked stake."
      }
    },
    "notice": "An IStakeManager instance that accepts stakes in any ERC-20 token.Single StakeInfo of a single RelayManager can only have one token address assigned to it.It cannot be changed after the first time 'stakeForRelayManager' is called as it is equivalent to withdrawal.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts-link/StakeManager.sol:StakeManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5279,
        "contract": "contracts-link/StakeManager.sol:StakeManager",
        "label": "versionSM",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 5283,
        "contract": "contracts-link/StakeManager.sol:StakeManager",
        "label": "burnAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5291,
        "contract": "contracts-link/StakeManager.sol:StakeManager",
        "label": "stakes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(StakeInfo)7655_storage)"
      },
      {
        "astId": 5372,
        "contract": "contracts-link/StakeManager.sol:StakeManager",
        "label": "authorizedHubs",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(RelayHubInfo)7658_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)731": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(RelayHubInfo)7658_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct IStakeManager.RelayHubInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(RelayHubInfo)7658_storage)"
      },
      "t_mapping(t_address,t_struct(RelayHubInfo)7658_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakeManager.RelayHubInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RelayHubInfo)7658_storage"
      },
      "t_mapping(t_address,t_struct(StakeInfo)7655_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IStakeManager.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)7655_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RelayHubInfo)7658_storage": {
        "encoding": "inplace",
        "label": "struct IStakeManager.RelayHubInfo",
        "members": [
          {
            "astId": 7657,
            "contract": "contracts-link/StakeManager.sol:StakeManager",
            "label": "removalTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(StakeInfo)7655_storage": {
        "encoding": "inplace",
        "label": "struct IStakeManager.StakeInfo",
        "members": [
          {
            "astId": 7645,
            "contract": "contracts-link/StakeManager.sol:StakeManager",
            "label": "stake",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7647,
            "contract": "contracts-link/StakeManager.sol:StakeManager",
            "label": "unstakeDelay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7649,
            "contract": "contracts-link/StakeManager.sol:StakeManager",
            "label": "withdrawTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7652,
            "contract": "contracts-link/StakeManager.sol:StakeManager",
            "label": "token",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)731"
          },
          {
            "astId": 7654,
            "contract": "contracts-link/StakeManager.sol:StakeManager",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}