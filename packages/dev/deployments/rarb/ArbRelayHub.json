{
  "address": "0xBd34778D53B0C53797C744feC8aeA191f91e164F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ArbSys",
          "name": "_arbsys",
          "type": "address"
        },
        {
          "internalType": "contract IStakeManager",
          "name": "_stakeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_penalizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_batchGateway",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relayRegistrar",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxWorkerCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasReserve",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postOverhead",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasOverhead",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumUnstakeDelay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "devAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "devFee",
              "type": "uint8"
            }
          ],
          "internalType": "struct IRelayHub.RelayHubConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deprecationTime",
          "type": "uint256"
        }
      ],
      "name": "HubDeprecated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxWorkerCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasReserve",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postOverhead",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasOverhead",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumUnstakeDelay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "devAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "devFee",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct IRelayHub.RelayHubConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "RelayHubConfigured",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "newRelayWorkers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "workersCount",
          "type": "uint256"
        }
      ],
      "name": "RelayWorkersAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumStake",
          "type": "uint256"
        }
      ],
      "name": "StakingTokenDataChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "relayRequestID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayWorker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "innerGasUsed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "reason",
          "type": "bytes"
        }
      ],
      "name": "TransactionRejectedByPaymaster",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayWorker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "relayRequestID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "paymaster",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "enum IRelayHub.RelayCallStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "charge",
          "type": "uint256"
        }
      ],
      "name": "TransactionRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum IRelayHub.RelayCallStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "returnValue",
          "type": "bytes"
        }
      ],
      "name": "TransactionResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dest",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newRelayWorkers",
          "type": "address[]"
        }
      ],
      "name": "addRelayWorkers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aggregateGasleft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbsys",
      "outputs": [
        {
          "internalType": "contract ArbSys",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasUsed",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pctRelayFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseRelayFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transactionCalldataGasUsed",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayWorker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymaster",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "forwarder",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "paymasterData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "clientId",
              "type": "uint256"
            }
          ],
          "internalType": "struct GsnTypes.RelayData",
          "name": "relayData",
          "type": "tuple"
        }
      ],
      "name": "calculateCharge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "charge",
          "type": "uint256"
        }
      ],
      "name": "calculateDevCharge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_deprecationTime",
          "type": "uint256"
        }
      ],
      "name": "deprecateHub",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBatchGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfiguration",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxWorkerCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasReserve",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postOverhead",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasOverhead",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumUnstakeDelay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "devAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "devFee",
              "type": "uint8"
            }
          ],
          "internalType": "struct IRelayHub.RelayHubConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCreationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeprecationTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getL1CreationBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getMinimumStakePerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPenalizer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRelayRegistrar",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeManager",
      "outputs": [
        {
          "internalType": "contract IStakeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "getWorkerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "getWorkerManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntilTime",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IForwarder.ForwardRequest",
              "name": "request",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pctRelayFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "baseRelayFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "transactionCalldataGasUsed",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "relayWorker",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "paymaster",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "forwarder",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "clientId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GsnTypes.RelayData",
              "name": "relayData",
              "type": "tuple"
            }
          ],
          "internalType": "struct GsnTypes.RelayRequest",
          "name": "relayRequest",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "approvalData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "acceptanceBudget",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preRelayedCallGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postRelayedCallGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "calldataSizeLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPaymaster.GasAndDataLimits",
          "name": "gasAndDataLimits",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "totalInitialGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPossibleGas",
          "type": "uint256"
        }
      ],
      "name": "innerRelayCall",
      "outputs": [
        {
          "internalType": "enum IRelayHub.RelayCallStatus",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDeprecated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayWorker",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "penalize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxAcceptanceBudget",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntilTime",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IForwarder.ForwardRequest",
              "name": "request",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "pctRelayFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "baseRelayFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "transactionCalldataGasUsed",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "relayWorker",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "paymaster",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "forwarder",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "clientId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GsnTypes.RelayData",
              "name": "relayData",
              "type": "tuple"
            }
          ],
          "internalType": "struct GsnTypes.RelayRequest",
          "name": "relayRequest",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "approvalData",
          "type": "bytes"
        }
      ],
      "name": "relayCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "paymasterAccepted",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "returnValue",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxWorkerCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasReserve",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postOverhead",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasOverhead",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minimumUnstakeDelay",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "devAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "devFee",
              "type": "uint8"
            }
          ],
          "internalType": "struct IRelayHub.RelayHubConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "setConfiguration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "token",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minimumStake",
          "type": "uint256[]"
        }
      ],
      "name": "setMinimumStakes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        }
      ],
      "name": "verifyCanRegister",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "relayManager",
          "type": "address"
        }
      ],
      "name": "verifyRelayManagerStaked",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionHub",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "dest",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d6d3ddcaa8a4e9cc4fbd08c8a4629f6817bdc5d952d7f78b1c172c6a458e2fd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xBd34778D53B0C53797C744feC8aeA191f91e164F",
    "transactionIndex": 0,
    "gasUsed": "59077729",
    "logsBloom": "0x00000000004000000000000000000000000000000000000000800000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000004000000000000000000000000000000020000000000000100000800000000000000000000000000000000400000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000001000000000000000002000000000000000000020000000000000000000000000000000000000000000000000004000000000000000",
    "blockHash": "0x6dc002def29b3253b5297a5fecdf91093027a7a7a52c96e00ad2edf98e9839a7",
    "transactionHash": "0x3d6d3ddcaa8a4e9cc4fbd08c8a4629f6817bdc5d952d7f78b1c172c6a458e2fd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9589573,
        "transactionHash": "0x3d6d3ddcaa8a4e9cc4fbd08c8a4629f6817bdc5d952d7f78b1c172c6a458e2fd",
        "address": "0xBd34778D53B0C53797C744feC8aeA191f91e164F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6dc002def29b3253b5297a5fecdf91093027a7a7a52c96e00ad2edf98e9839a7"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9589573,
        "transactionHash": "0x3d6d3ddcaa8a4e9cc4fbd08c8a4629f6817bdc5d952d7f78b1c172c6a458e2fd",
        "address": "0xBd34778D53B0C53797C744feC8aeA191f91e164F",
        "topics": [
          "0xfd0fe4fa2d954b682752f887632a7d7edc955bc7691dba63ff3fa867cf7895f5"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000003a98000000000000000000000000efefefefefefefefefefefefefefefefefefefef0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x6dc002def29b3253b5297a5fecdf91093027a7a7a52c96e00ad2edf98e9839a7"
      }
    ],
    "blockNumber": 9589573,
    "cumulativeGasUsed": "26800448",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000064",
    "0xf4058b6b0c9cbF7Cf3AE5c6ABb9Da57Da3AdB7ab",
    "0x59FC283B190A1f8a960888FCA21323dC04AE288f",
    "0x0000000000000000000000000000000000000000",
    "0x098B6FE8d90C2178C0311fBA952c14f4Fa3031D6",
    {
      "gasOverhead": 1000000,
      "postOverhead": 0,
      "gasReserve": 100000,
      "maxWorkerCount": 10,
      "minimumUnstakeDelay": 15000,
      "devAddress": "0xeFEfeFEfeFeFEFEFEfefeFeFefEfEfEfeFEFEFEf",
      "devFee": 0
    }
  ],
  "numDeployments": 3,
  "solcInputHash": "ed54ecf1e58c2e0b82a21139c2bc4bdb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ArbSys\",\"name\":\"_arbsys\",\"type\":\"address\"},{\"internalType\":\"contract IStakeManager\",\"name\":\"_stakeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_penalizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_batchGateway\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relayRegistrar\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxWorkerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumUnstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"devFee\",\"type\":\"uint8\"}],\"internalType\":\"struct IRelayHub.RelayHubConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deprecationTime\",\"type\":\"uint256\"}],\"name\":\"HubDeprecated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxWorkerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumUnstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"devFee\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct IRelayHub.RelayHubConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"RelayHubConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newRelayWorkers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"workersCount\",\"type\":\"uint256\"}],\"name\":\"RelayWorkersAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumStake\",\"type\":\"uint256\"}],\"name\":\"StakingTokenDataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"relayRequestID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"innerGasUsed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"TransactionRejectedByPaymaster\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"relayRequestID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"enum IRelayHub.RelayCallStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"charge\",\"type\":\"uint256\"}],\"name\":\"TransactionRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IRelayHub.RelayCallStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"returnValue\",\"type\":\"bytes\"}],\"name\":\"TransactionResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newRelayWorkers\",\"type\":\"address[]\"}],\"name\":\"addRelayWorkers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregateGasleft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbsys\",\"outputs\":[{\"internalType\":\"contract ArbSys\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionCalldataGasUsed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"name\":\"calculateCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"charge\",\"type\":\"uint256\"}],\"name\":\"calculateDevCharge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deprecationTime\",\"type\":\"uint256\"}],\"name\":\"deprecateHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBatchGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfiguration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxWorkerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumUnstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"devFee\",\"type\":\"uint8\"}],\"internalType\":\"struct IRelayHub.RelayHubConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeprecationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1CreationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getMinimumStakePerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPenalizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayRegistrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeManager\",\"outputs\":[{\"internalType\":\"contract IStakeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"getWorkerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"getWorkerManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionCalldataGasUsed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"internalType\":\"struct GsnTypes.RelayRequest\",\"name\":\"relayRequest\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"acceptanceBudget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preRelayedCallGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRelayedCallGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calldataSizeLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaymaster.GasAndDataLimits\",\"name\":\"gasAndDataLimits\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"totalInitialGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPossibleGas\",\"type\":\"uint256\"}],\"name\":\"innerRelayCall\",\"outputs\":[{\"internalType\":\"enum IRelayHub.RelayCallStatus\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"penalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAcceptanceBudget\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pctRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseRelayFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionCalldataGasUsed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"internalType\":\"struct GsnTypes.RelayRequest\",\"name\":\"relayRequest\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"}],\"name\":\"relayCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"paymasterAccepted\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnValue\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxWorkerCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasOverhead\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumUnstakeDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"devAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"devFee\",\"type\":\"uint8\"}],\"internalType\":\"struct IRelayHub.RelayHubConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"token\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minimumStake\",\"type\":\"uint256[]\"}],\"name\":\"setMinimumStakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"}],\"name\":\"verifyCanRegister\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayManager\",\"type\":\"address\"}],\"name\":\"verifyRelayManagerStaked\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionHub\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"aggregateGasleft()\":{\"returns\":{\"_0\":\"A total measurable amount of gas left to current execution. Same as 'gasleft()' for pure EVMs.\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"An account's balance. It can be either a deposit of a `Paymaster`, or a revenue of a Relay Manager.\"}},\"calculateCharge(uint256,(uint256,uint256,uint256,uint256,uint256,address,address,address,bytes,uint256))\":{\"params\":{\"gasUsed\":\"An amount of gas used by the transaction.\",\"relayData\":\"The details of a transaction signed by the sender.\"},\"returns\":{\"_0\":\"The calculated charge, in wei.\"}},\"calculateDevCharge(uint256)\":{\"params\":{\"charge\":\"The amount of Ether in wei the Paymaster will be charged for this transaction.\"},\"returns\":{\"_0\":\"The calculated devFee, in wei.\"}},\"deprecateHub(uint256)\":{\"params\":{\"_deprecationTime\":\"The timestamp in seconds after which the `RelayHub` stops serving transactions.\"}},\"getBatchGateway()\":{\"returns\":{\"_0\":\"The `BatchGateway` address for this `RelayHub`.\"}},\"getConfiguration()\":{\"returns\":{\"_0\":\"The configuration of the `RelayHub`.\"}},\"getCreationBlock()\":{\"returns\":{\"_0\":\"The block number in which the contract has been deployed.\"}},\"getDeprecationTime()\":{\"returns\":{\"_0\":\"The timestamp from which the hub no longer allows relaying calls.\"}},\"getL1CreationBlock()\":{\"returns\":{\"_0\":\"The block number in which the contract has been deployed.\"}},\"getMinimumStakePerToken(address)\":{\"params\":{\"token\":\"An address of an ERC-20 compatible tokens.\"},\"returns\":{\"_0\":\"The minimum amount of a given `token` that needs to be staked so that the Relay Manager is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking.\"}},\"getPenalizer()\":{\"returns\":{\"_0\":\"The `Penalizer` address for this `RelayHub`.\"}},\"getRelayRegistrar()\":{\"returns\":{\"_0\":\"The `RelayRegistrar` address for this `RelayHub`.\"}},\"getStakeManager()\":{\"returns\":{\"_0\":\"The `StakeManager` address for this `RelayHub`.\"}},\"getWorkerCount(address)\":{\"params\":{\"manager\":\"An address of the Relay Manager.\"},\"returns\":{\"_0\":\"The count of Relay Workers associated with this Relay Manager.\"}},\"getWorkerManager(address)\":{\"params\":{\"worker\":\"An address of the Relay Worker.\"},\"returns\":{\"_0\":\"The address of its Relay Manager.\"}},\"isDeprecated()\":{\"returns\":{\"_0\":\"`true` if the `RelayHub` is deprecated, `false` it it is not deprecated and can serve transactions.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"penalize(address,address)\":{\"params\":{\"beneficiary\":\"The address that called the `Penalizer` and will receive a reward for it.\",\"relayWorker\":\"The address of the Relay Worker that committed a penalizable offense.\"}},\"relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes)\":{\"params\":{\"approvalData\":\"The dapp-specific data forwarded to the `Paymaster`'s `preRelayedCall` method. This value is **not** verified by the `RelayHub` in any way. As an example, it can be used to pass some kind of a third-party signature to the `Paymaster` for verification. Emits a `TransactionRelayed` event regardless of whether the transaction succeeded or failed.\",\"maxAcceptanceBudget\":\"The maximum valid value for `paymaster.getGasLimits().acceptanceBudget` to return.\",\"relayRequest\":\"All details of the requested relayed call.\",\"signature\":\"The client's EIP-712 signature over the `relayRequest` struct.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setConfiguration((uint256,uint256,uint256,uint256,uint256,address,uint8))\":{\"params\":{\"_config\":\"The new configuration.\"}},\"setMinimumStakes(address[],uint256[])\":{\"params\":{\"minimumStake\":\"An array of minimal amounts necessary for a corresponding token, in wei.\",\"token\":\"An array of addresses of ERC-20 compatible tokens.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"versionHub()\":{\"returns\":{\"_0\":\"a SemVer-compliant version of the `RelayHub` contract.\"}}},\"title\":\"The RelayHub Implementation for Arbitrum\",\"version\":1},\"userdoc\":{\"events\":{\"Deposited(address,address,uint256)\":{\"notice\":\"Emitted when `depositFor` is called, including the amount and account that was funded.\"},\"HubDeprecated(uint256)\":{\"notice\":\"This event is emitted in case this `RelayHub` is deprecated and will stop serving transactions soon.\"},\"RelayHubConfigured((uint256,uint256,uint256,uint256,uint256,address,uint8))\":{\"notice\":\"Emitted when a configuration of the `RelayHub` is changed\"},\"RelayWorkersAdded(address,address[],uint256)\":{\"notice\":\"Emitted when relays are added by a relayManager\"},\"StakingTokenDataChanged(address,uint256)\":{\"notice\":\"Emitted for each token configured for staking in setMinimumStakes\"},\"TransactionRejectedByPaymaster(address,address,bytes32,address,address,address,bytes4,uint256,bytes)\":{\"notice\":\"Emitted when an attempt to relay a call fails and the `Paymaster` does not accept the transaction. The actual relayed call was not executed, and the recipient not charged.\"},\"TransactionRelayed(address,address,bytes32,address,address,address,bytes4,uint8,uint256)\":{\"notice\":\"Emitted when a transaction is relayed. Note that the actual internal function call might be reverted. The reason for a revert will be indicated in the `status` field of a corresponding `RelayCallStatus` value.`charge` is the Ether value deducted from the `Paymaster` balance. The amount added to the `relayManager` balance will be lower if there is an activated `devFee` in the `config`.\"},\"TransactionResult(uint8,bytes)\":{\"notice\":\"This event is emitted in case the internal function returns a value or reverts with a revert string.\"},\"Withdrawn(address,address,uint256)\":{\"notice\":\"Emitted when an account withdraws funds from the `RelayHub`.\"}},\"kind\":\"user\",\"methods\":{\"addRelayWorkers(address[])\":{\"notice\":\"Add new worker addresses controlled by the sender who must be a staked Relay Manager address. Emits a `RelayWorkersAdded` event. This function can be called multiple times, emitting new events.\"},\"aggregateGasleft()\":{\"notice\":\"Includes the 'storage gas' specific to the Arbitrum Rollup.\"},\"calculateCharge(uint256,(uint256,uint256,uint256,uint256,uint256,address,address,address,bytes,uint256))\":{\"notice\":\"The fee is expressed as a base fee in wei plus percentage of the actual charge. For example, a value '40' stands for a 40% fee, so the recipient will be charged for 1.4 times the spent amount.\"},\"calculateDevCharge(uint256)\":{\"notice\":\"The fee is expressed as a  percentage of the actual charge. For example, a value '40' stands for a 40% fee, so the Relay Manager will only get 60% of the `charge`.\"},\"constructor\":{\"notice\":\"we accept the `ArbSys` address in the constructor to allow mocking it in tests.\"},\"depositFor(address)\":{\"notice\":\"Deposits ether for a `Paymaster`, so that it can and pay for relayed transactions. :warning: **Warning** :warning: Unused balance can only be withdrawn by the holder itself, by calling `withdraw`. Emits a `Deposited` event.\"},\"deprecateHub(uint256)\":{\"notice\":\"Deprecate hub by reverting all incoming `relayCall()` calls starting from a given timestamp\"},\"getCreationBlock()\":{\"notice\":\"Uses `ArbSys` L2 block number specific to the Arbitrum Rollup.\"},\"getL1CreationBlock()\":{\"notice\":\"Uses original L1 block number.\"},\"innerRelayCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,(uint256,uint256,uint256,uint256),uint256,uint256)\":{\"notice\":\"This method can only by called by this `RelayHub`. It wraps the execution of the `RelayRequest` in a revertable frame context.\"},\"penalize(address,address)\":{\"notice\":\"In case the Relay Worker has been found to be in violation of some rules by the `Penalizer` contract, the `Penalizer` will call this method to execute a penalization. The `RelayHub` will look up the Relay Manager of the given Relay Worker and will forward the call to the `StakeManager` contract. The `RelayHub` does not perform the actual penalization either.\"},\"relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes)\":{\"notice\":\"Relays a transaction. For this to succeed, multiple conditions must be met:  - `Paymaster`'s `preRelayCall` method must succeed and not revert.  - the `msg.sender` must be a registered Relay Worker that the user signed to use.  - the transaction's gas fees must be equal or larger than the ones that were signed by the sender.  - the transaction must have enough gas to run all internal transactions if they use all gas available to them.  - the `Paymaster` must have enough balance to pay the Relay Worker if all gas is spent.If all conditions are met, the call will be relayed and the `Paymaster` charged.\"},\"setConfiguration((uint256,uint256,uint256,uint256,uint256,address,uint8))\":{\"notice\":\"Sets or changes the configuration of this `RelayHub`.\"},\"setMinimumStakes(address[],uint256[])\":{\"notice\":\"Sets or changes the minimum amount of a given `token` that needs to be staked so that the Relay Manager is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking.\"},\"verifyRelayManagerStaked(address)\":{\"notice\":\"Uses `StakeManager` to decide if the Relay Manager can be considered staked or not. Returns if the stake's token, amount and delay satisfy all requirements, reverts otherwise.\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraws from an account's balance, sending it back to the caller. Relay Managers call this to retrieve their revenue, and `Paymasters` can also use it to reduce their funding. Emits a `Withdrawn` event.\"}},\"notice\":\"This contract implements the `IRelayHub` interface for the Arbitrum-compatible Rollups.This implementation relies on the `ArbSys` built-ins that do not exist outside of Arbitrum.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts-link/arbitrum/ArbRelayHub.sol\":\"ArbRelayHub\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xfaad496c1c944b6259b7dc70b4865eb1775d6402bc0c81b38a0b24d9f525ae37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts-link/RelayHub.sol\":{\"content\":\"pragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable not-rely-on-time */\\n/* solhint-disable avoid-tx-origin */\\n/* solhint-disable bracket-align */\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./utils/MinLibBytes.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./utils/GsnUtils.sol\\\";\\nimport \\\"./utils/GsnEip712Library.sol\\\";\\nimport \\\"./utils/RelayHubValidator.sol\\\";\\nimport \\\"./utils/GsnTypes.sol\\\";\\nimport \\\"./interfaces/IRelayHub.sol\\\";\\nimport \\\"./interfaces/IPaymaster.sol\\\";\\nimport \\\"./forwarder/IForwarder.sol\\\";\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\nimport \\\"./interfaces/IRelayRegistrar.sol\\\";\\nimport \\\"./interfaces/IStakeManager.sol\\\";\\n\\n/**\\n * @title The RelayHub Implementation\\n * @notice This contract implements the `IRelayHub` interface for the EVM-compatible networks.\\n */\\ncontract RelayHub is IRelayHub, Ownable, ERC165 {\\n    using ERC165Checker for address;\\n    using SafeMath for uint256;\\n\\n    /// @inheritdoc IRelayHub\\n    function versionHub() override virtual public pure returns (string memory){\\n        return \\\"3.0.0-alpha.3+opengsn.hub.irelayhub\\\";\\n    }\\n\\n    IStakeManager internal immutable stakeManager;\\n    address internal immutable penalizer;\\n    address internal immutable batchGateway;\\n    address internal immutable relayRegistrar;\\n\\n    RelayHubConfig internal config;\\n\\n    /// @inheritdoc IRelayHub\\n    function getConfiguration() public override view returns (RelayHubConfig memory) {\\n        return config;\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function setConfiguration(RelayHubConfig memory _config) public override onlyOwner {\\n        require(_config.devFee < 100, \\\"dev fee too high\\\");\\n        config = _config;\\n        emit RelayHubConfigured(config);\\n    }\\n\\n    // maps ERC-20 token address to a minimum stake for it\\n    mapping(IERC20 => uint256) internal minimumStakePerToken;\\n\\n    /// @inheritdoc IRelayHub\\n    function setMinimumStakes(IERC20[] memory token, uint256[] memory minimumStake) public override onlyOwner {\\n        require(token.length == minimumStake.length, \\\"setMinimumStakes: wrong length\\\");\\n        for (uint256 i = 0; i < token.length; i++) {\\n            minimumStakePerToken[token[i]] = minimumStake[i];\\n            emit StakingTokenDataChanged(address(token[i]), minimumStake[i]);\\n        }\\n    }\\n\\n    // maps relay worker's address to its manager's address\\n    mapping(address => address) internal workerToManager;\\n\\n    // maps relay managers to the number of their workers\\n    mapping(address => uint256) internal workerCount;\\n\\n    mapping(address => uint256) internal balances;\\n\\n    uint256 internal immutable creationBlock;\\n    uint256 internal deprecationTime = type(uint256).max;\\n\\n    constructor (\\n        IStakeManager _stakeManager,\\n        address _penalizer,\\n        address _batchGateway,\\n        address _relayRegistrar,\\n        RelayHubConfig memory _config\\n    ) {\\n        creationBlock = block.number;\\n        stakeManager = _stakeManager;\\n        penalizer = _penalizer;\\n        batchGateway = _batchGateway;\\n        relayRegistrar = _relayRegistrar;\\n        setConfiguration(_config);\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function getCreationBlock() external override virtual view returns (uint256){\\n        return creationBlock;\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function getDeprecationTime() external override view returns (uint256) {\\n        return deprecationTime;\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function getStakeManager() external override view returns (IStakeManager) {\\n        return stakeManager;\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function getPenalizer() external override view returns (address) {\\n        return penalizer;\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function getBatchGateway() external override view returns (address) {\\n        return batchGateway;\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function getRelayRegistrar() external override view returns (address) {\\n        return relayRegistrar;\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function getMinimumStakePerToken(IERC20 token) external override view returns (uint256) {\\n        return minimumStakePerToken[token];\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function getWorkerManager(address worker) external override view returns (address) {\\n        return workerToManager[worker];\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function getWorkerCount(address manager) external override view returns (uint256) {\\n        return workerCount[manager];\\n    }\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IRelayHub).interfaceId ||\\n            interfaceId == type(Ownable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function verifyCanRegister(address relayManager) external view override {\\n        verifyRelayManagerStaked(relayManager);\\n        require(workerCount[relayManager] > 0, \\\"no relay workers\\\");\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function addRelayWorkers(address[] calldata newRelayWorkers) external override {\\n        address relayManager = msg.sender;\\n        uint256 newWorkerCount = workerCount[relayManager] + newRelayWorkers.length;\\n        workerCount[relayManager] = newWorkerCount;\\n        require(newWorkerCount <= config.maxWorkerCount, \\\"too many workers\\\");\\n\\n        verifyRelayManagerStaked(relayManager);\\n\\n        for (uint256 i = 0; i < newRelayWorkers.length; i++) {\\n            require(workerToManager[newRelayWorkers[i]] == address(0), \\\"this worker has a manager\\\");\\n            workerToManager[newRelayWorkers[i]] = relayManager;\\n        }\\n\\n        emit RelayWorkersAdded(relayManager, newRelayWorkers, newWorkerCount);\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function depositFor(address target) public virtual override payable {\\n        require(target.supportsInterface(type(IPaymaster).interfaceId), \\\"target is not a valid IPaymaster\\\");\\n        uint256 amount = msg.value;\\n\\n        balances[target] = balances[target].add(amount);\\n\\n        emit Deposited(target, msg.sender, amount);\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function balanceOf(address target) external override view returns (uint256) {\\n        return balances[target];\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function withdraw(uint256 amount, address payable dest) public override {\\n        address payable account = payable(msg.sender);\\n        require(balances[account] >= amount, \\\"insufficient funds\\\");\\n\\n        balances[account] = balances[account].sub(amount);\\n        dest.transfer(amount);\\n\\n        emit Withdrawn(account, dest, amount);\\n    }\\n\\n    function verifyGasAndDataLimits(\\n        uint256 maxAcceptanceBudget,\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        uint256 initialGasLeft\\n    )\\n    private\\n    view\\n    returns (IPaymaster.GasAndDataLimits memory gasAndDataLimits, uint256 maxPossibleGas) {\\n        gasAndDataLimits =\\n            IPaymaster(relayRequest.relayData.paymaster).getGasAndDataLimits{gas:50000}();\\n        require(msg.data.length <= gasAndDataLimits.calldataSizeLimit, \\\"msg.data exceeded limit\\\" );\\n\\n        require(maxAcceptanceBudget >= gasAndDataLimits.acceptanceBudget, \\\"acceptance budget too high\\\");\\n        require(gasAndDataLimits.acceptanceBudget >= gasAndDataLimits.preRelayedCallGasLimit, \\\"acceptance budget too low\\\");\\n\\n        maxPossibleGas = relayRequest.relayData.transactionCalldataGasUsed + initialGasLeft;\\n\\n        uint256 maxPossibleCharge = calculateCharge(\\n            maxPossibleGas,\\n            relayRequest.relayData\\n        );\\n\\n        // We don't yet know how much gas will be used by the recipient, so we make sure there are enough funds to pay\\n        // for the maximum possible charge.\\n        require(maxPossibleCharge <= balances[relayRequest.relayData.paymaster],\\n            \\\"Paymaster balance too low\\\");\\n    }\\n\\n    struct RelayCallData {\\n        bool success;\\n        bytes4 functionSelector;\\n        uint256 initialGasLeft;\\n        bytes recipientContext;\\n        bytes relayedCallReturnValue;\\n        IPaymaster.GasAndDataLimits gasAndDataLimits;\\n        RelayCallStatus status;\\n        uint256 innerGasUsed;\\n        uint256 maxPossibleGas;\\n        uint256 gasBeforeInner;\\n        bytes retData;\\n        address relayManager;\\n        bytes32 relayRequestId;\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function relayCall(\\n        uint256 maxAcceptanceBudget,\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData\\n    )\\n    external\\n    override\\n    returns (bool paymasterAccepted, bytes memory returnValue)\\n    {\\n        RelayCallData memory vars;\\n        vars.initialGasLeft = aggregateGasleft();\\n        vars.relayRequestId = GsnUtils.getRelayRequestID(relayRequest, signature);\\n        require(!isDeprecated(), \\\"hub deprecated\\\");\\n        vars.functionSelector = relayRequest.request.data.length>=4 ? MinLibBytes.readBytes4(relayRequest.request.data, 0) : bytes4(0);\\n        if (msg.sender != batchGateway){\\n            require(signature.length != 0, \\\"missing signature or bad gateway\\\");\\n            require(msg.sender == tx.origin, \\\"relay worker must be EOA\\\");\\n            require(msg.sender == relayRequest.relayData.relayWorker, \\\"Not a right worker\\\");\\n        }\\n        vars.relayManager = workerToManager[relayRequest.relayData.relayWorker];\\n        require(vars.relayManager != address(0), \\\"Unknown relay worker\\\");\\n        verifyRelayManagerStaked(vars.relayManager);\\n\\n        (vars.gasAndDataLimits, vars.maxPossibleGas) =\\n            verifyGasAndDataLimits(maxAcceptanceBudget, relayRequest, vars.initialGasLeft);\\n\\n        RelayHubValidator.verifyTransactionPacking(relayRequest,signature,approvalData);\\n\\n    {\\n\\n        //How much gas to pass down to innerRelayCall. must be lower than the default 63/64\\n        // actually, min(gasleft*63/64, gasleft-GAS_RESERVE) might be enough.\\n        uint256 innerGasLimit = gasleft()*63/64- config.gasReserve;\\n        vars.gasBeforeInner = aggregateGasleft();\\n\\n        /*\\n        Preparing to calculate \\\"gasUseWithoutPost\\\":\\n        MPG = calldataGasUsage + vars.initialGasLeft :: max possible gas, an approximate gas limit for the current transaction\\n        GU1 = MPG - gasleft(called right before innerRelayCall) :: gas actually used by current transaction until that point\\n        GU2 = innerGasLimit - gasleft(called inside the innerRelayCall just before preRelayedCall) :: gas actually used by innerRelayCall before calling postRelayCall\\n        GWP1 = GU1 + GU2 :: gas actually used by the entire transaction before calling postRelayCall\\n        TGO = config.gasOverhead + config.postOverhead :: extra that will be added to the charge to cover hidden costs\\n        GWP = GWP1 + TGO :: transaction \\\"gas used without postRelayCall\\\"\\n        */\\n        uint256 _tmpInitialGas = relayRequest.relayData.transactionCalldataGasUsed + vars.initialGasLeft + innerGasLimit + config.gasOverhead + config.postOverhead;\\n        // Calls to the recipient are performed atomically inside an inner transaction which may revert in case of\\n        // errors in the recipient. In either case (revert or regular execution) the return data encodes the\\n        // RelayCallStatus value.\\n        (bool success, bytes memory relayCallStatus) = address(this).call{gas:innerGasLimit}(\\n            abi.encodeWithSelector(RelayHub.innerRelayCall.selector, relayRequest, signature, approvalData, vars.gasAndDataLimits,\\n            _tmpInitialGas - aggregateGasleft(), /* totalInitialGas */\\n            vars.maxPossibleGas\\n            )\\n        );\\n        vars.success = success;\\n        vars.innerGasUsed = vars.gasBeforeInner-aggregateGasleft();\\n        (vars.status, vars.relayedCallReturnValue) = abi.decode(relayCallStatus, (RelayCallStatus, bytes));\\n        if ( vars.relayedCallReturnValue.length>0 ) {\\n            emit TransactionResult(vars.status, vars.relayedCallReturnValue);\\n        }\\n    }\\n    {\\n        if (!vars.success) {\\n            //Failure cases where the PM doesn't pay\\n            if (vars.status == RelayCallStatus.RejectedByPreRelayed ||\\n                    (vars.innerGasUsed <= vars.gasAndDataLimits.acceptanceBudget.add(relayRequest.relayData.transactionCalldataGasUsed)) && (\\n                    vars.status == RelayCallStatus.RejectedByForwarder ||\\n                    vars.status == RelayCallStatus.RejectedByRecipientRevert  //can only be thrown if rejectOnRecipientRevert==true\\n                )) {\\n                paymasterAccepted=false;\\n\\n                emit TransactionRejectedByPaymaster(\\n                    vars.relayManager,\\n                    relayRequest.relayData.paymaster,\\n                    vars.relayRequestId,\\n                    relayRequest.request.from,\\n                    relayRequest.request.to,\\n                    msg.sender,\\n                    vars.functionSelector,\\n                    vars.innerGasUsed,\\n                    vars.relayedCallReturnValue);\\n                return (false, vars.relayedCallReturnValue);\\n            }\\n        }\\n\\n        // We now perform the actual charge calculation, based on the measured gas used\\n        uint256 gasUsed = relayRequest.relayData.transactionCalldataGasUsed + (vars.initialGasLeft - aggregateGasleft()) + config.gasOverhead;\\n        uint256 charge = calculateCharge(gasUsed, relayRequest.relayData);\\n        uint256 devCharge = calculateDevCharge(charge);\\n\\n        balances[relayRequest.relayData.paymaster] = balances[relayRequest.relayData.paymaster].sub(charge);\\n        balances[vars.relayManager] = balances[vars.relayManager].add(charge.sub(devCharge));\\n        if (devCharge > 0) { // save some gas in case of zero dev charge\\n            balances[config.devAddress] = balances[config.devAddress].add(devCharge);\\n        }\\n\\n        {\\n            address from = relayRequest.request.from;\\n            address to = relayRequest.request.to;\\n            address paymaster = relayRequest.relayData.paymaster;\\n            emit TransactionRelayed(\\n                vars.relayManager,\\n                msg.sender,\\n                vars.relayRequestId,\\n                from,\\n                to,\\n                paymaster,\\n                vars.functionSelector,\\n                vars.status,\\n                charge);\\n        }\\n        return (true, \\\"\\\");\\n    }\\n    }\\n\\n    struct InnerRelayCallData {\\n        uint256 initialGasLeft;\\n        uint256 gasUsedToCallInner;\\n        uint256 balanceBefore;\\n        bytes32 preReturnValue;\\n        bool relayedCallSuccess;\\n        bytes relayedCallReturnValue;\\n        bytes recipientContext;\\n        bytes data;\\n        bool rejectOnRecipientRevert;\\n    }\\n\\n    /**\\n     * @notice This method can only by called by this `RelayHub`.\\n     * It wraps the execution of the `RelayRequest` in a revertable frame context.\\n     */\\n    function innerRelayCall(\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        IPaymaster.GasAndDataLimits calldata gasAndDataLimits,\\n        uint256 totalInitialGas,\\n        uint256 maxPossibleGas\\n    )\\n    external\\n    returns (RelayCallStatus, bytes memory)\\n    {\\n        InnerRelayCallData memory vars;\\n        vars.initialGasLeft = aggregateGasleft();\\n        vars.gasUsedToCallInner = totalInitialGas - gasleft();\\n        // A new gas measurement is performed inside innerRelayCall, since\\n        // due to EIP150 available gas amounts cannot be directly compared across external calls\\n\\n        // This external function can only be called by RelayHub itself, creating an internal transaction. Calls to the\\n        // recipient (preRelayedCall, the relayedCall, and postRelayedCall) are called from inside this transaction.\\n        require(msg.sender == address(this), \\\"Must be called by RelayHub\\\");\\n\\n        // If either pre or post reverts, the whole internal transaction will be reverted, reverting all side effects on\\n        // the recipient. The recipient will still be charged for the used gas by the relay.\\n\\n        // The paymaster is no allowed to withdraw balance from RelayHub during a relayed transaction. We check pre and\\n        // post state to ensure this doesn't happen.\\n        vars.balanceBefore = balances[relayRequest.relayData.paymaster];\\n\\n        // First preRelayedCall is executed.\\n        // Note: we open a new block to avoid growing the stack too much.\\n        vars.data = abi.encodeWithSelector(\\n            IPaymaster.preRelayedCall.selector,\\n            relayRequest, signature, approvalData, maxPossibleGas\\n        );\\n        {\\n            bool success;\\n            bytes memory retData;\\n            (success, retData) = relayRequest.relayData.paymaster.call{gas:gasAndDataLimits.preRelayedCallGasLimit}(vars.data);\\n            if (!success) {\\n                GsnEip712Library.truncateInPlace(retData);\\n                revertWithStatus(RelayCallStatus.RejectedByPreRelayed, retData);\\n            }\\n            (vars.recipientContext, vars.rejectOnRecipientRevert) = abi.decode(retData, (bytes,bool));\\n        }\\n\\n        // The actual relayed call is now executed. The sender's address is appended at the end of the transaction data\\n\\n        {\\n            bool forwarderSuccess;\\n            (forwarderSuccess, vars.relayedCallSuccess, vars.relayedCallReturnValue) = GsnEip712Library.execute(relayRequest, signature);\\n            if ( !forwarderSuccess ) {\\n                revertWithStatus(RelayCallStatus.RejectedByForwarder, vars.relayedCallReturnValue);\\n            }\\n\\n            if (vars.rejectOnRecipientRevert && !vars.relayedCallSuccess) {\\n                // we trusted the recipient, but it reverted...\\n                revertWithStatus(RelayCallStatus.RejectedByRecipientRevert, vars.relayedCallReturnValue);\\n            }\\n        }\\n        // Finally, postRelayedCall is executed, with the relayedCall execution's status and a charge estimate\\n        // We now determine how much the recipient will be charged, to pass this value to postRelayedCall for accurate\\n        // accounting.\\n        vars.data = abi.encodeWithSelector(\\n            IPaymaster.postRelayedCall.selector,\\n            vars.recipientContext,\\n            vars.relayedCallSuccess,\\n            vars.gasUsedToCallInner + (vars.initialGasLeft - aggregateGasleft()), /*gasUseWithoutPost*/\\n            relayRequest.relayData\\n        );\\n\\n        {\\n        (bool successPost,bytes memory ret) = relayRequest.relayData.paymaster.call{gas:gasAndDataLimits.postRelayedCallGasLimit}(vars.data);\\n\\n            if (!successPost) {\\n                revertWithStatus(RelayCallStatus.PostRelayedFailed, ret);\\n            }\\n        }\\n\\n        if (balances[relayRequest.relayData.paymaster] < vars.balanceBefore) {\\n            revertWithStatus(RelayCallStatus.PaymasterBalanceChanged, \\\"\\\");\\n        }\\n\\n        return (vars.relayedCallSuccess ? RelayCallStatus.OK : RelayCallStatus.RelayedCallFailed, vars.relayedCallReturnValue);\\n    }\\n\\n    /**\\n     * @dev Reverts the transaction with return data set to the ABI encoding of the status argument (and revert reason data)\\n     */\\n    function revertWithStatus(RelayCallStatus status, bytes memory ret) private pure {\\n        bytes memory data = abi.encode(status, ret);\\n        GsnEip712Library.truncateInPlace(data);\\n\\n        assembly {\\n            let dataSize := mload(data)\\n            let dataPtr := add(data, 32)\\n\\n            revert(dataPtr, dataSize)\\n        }\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function calculateDevCharge(uint256 charge) public override virtual view returns (uint256){\\n        if (config.devFee == 0){ // save some gas in case of zero dev charge\\n            return 0;\\n        }\\n        unchecked {\\n        return charge * config.devFee / 100;\\n        }\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) public override virtual view returns (uint256) {\\n        uint256 basefee;\\n        if (relayData.maxFeePerGas == relayData.maxPriorityFeePerGas) {\\n            basefee = 0;\\n        } else {\\n            basefee = block.basefee;\\n        }\\n        uint256 chargeableGasPrice = Math.min(relayData.maxFeePerGas, Math.min(tx.gasprice, basefee + relayData.maxPriorityFeePerGas));\\n        return relayData.baseRelayFee.add((gasUsed.mul(chargeableGasPrice).mul(relayData.pctRelayFee.add(100))).div(100));\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function verifyRelayManagerStaked(address relayManager) public override view {\\n        (IStakeManager.StakeInfo memory info, bool isHubAuthorized) = stakeManager.getStakeInfo(relayManager);\\n        uint256 minimumStake = minimumStakePerToken[info.token];\\n        require(info.token != IERC20(address(0)), \\\"relay manager not staked\\\");\\n        require(info.stake >= minimumStake, \\\"stake amount is too small\\\");\\n        require(minimumStake != 0, \\\"staking this token is forbidden\\\");\\n        require(info.unstakeDelay >= config.minimumUnstakeDelay, \\\"unstake delay is too small\\\");\\n        require(info.withdrawTime == 0, \\\"stake has been withdrawn\\\");\\n        require(isHubAuthorized, \\\"this hub is not authorized by SM\\\");\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function deprecateHub(uint256 _deprecationTime) public override onlyOwner {\\n        require(!isDeprecated(), \\\"Already deprecated\\\");\\n        deprecationTime = _deprecationTime;\\n        emit HubDeprecated(deprecationTime);\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function isDeprecated() public override view returns (bool) {\\n        return block.timestamp >= deprecationTime;\\n    }\\n\\n    /// @notice Prevents any address other than the `Penalizer` from calling this method.\\n    modifier penalizerOnly () {\\n        require(msg.sender == penalizer, \\\"Not penalizer\\\");\\n        _;\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function penalize(address relayWorker, address payable beneficiary) external override penalizerOnly {\\n        address relayManager = workerToManager[relayWorker];\\n        // The worker must be controlled by a manager with a locked stake\\n        require(relayManager != address(0), \\\"Unknown relay worker\\\");\\n        (IStakeManager.StakeInfo memory stakeInfo,) = stakeManager.getStakeInfo(relayManager);\\n        require(stakeInfo.stake > 0, \\\"relay manager not staked\\\");\\n        stakeManager.penalizeRelayManager(relayManager, beneficiary, stakeInfo.stake);\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    function aggregateGasleft() public override virtual view returns (uint256){\\n        return gasleft();\\n    }\\n}\",\"keccak256\":\"0x9c38b92e806b7f90c0a73bccf6a7698bf777e3c66c0130092e95f0bdcc037e46\",\"license\":\"GPL-3.0-only\"},\"contracts-link/arbitrum/ArbRelayHub.sol\":{\"content\":\"pragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../RelayHub.sol\\\";\\nimport \\\"./ArbSys.sol\\\";\\n\\n/**\\n * @title The RelayHub Implementation for Arbitrum\\n * @notice This contract implements the `IRelayHub` interface for the Arbitrum-compatible Rollups.\\n *\\n * @notice This implementation relies on the `ArbSys` built-ins that do not exist outside of Arbitrum.\\n */\\ncontract ArbRelayHub is RelayHub {\\n\\n    /// @inheritdoc IRelayHub\\n    function versionHub() override public pure returns (string memory){\\n        return \\\"3.0.0-alpha.3+opengsn.arbhub.irelayhub\\\";\\n    }\\n\\n    ArbSys public immutable arbsys;\\n    uint256 internal immutable arbCreationBlock;\\n\\n    /// @notice we accept the `ArbSys` address in the constructor to allow mocking it in tests.\\n    constructor(\\n        ArbSys _arbsys,\\n        IStakeManager _stakeManager,\\n        address _penalizer,\\n        address _batchGateway,\\n        address _relayRegistrar,\\n        RelayHubConfig memory _config\\n    ) RelayHub(_stakeManager, _penalizer, _batchGateway, _relayRegistrar, _config){\\n        arbsys = _arbsys;\\n        arbCreationBlock = _arbsys.arbBlockNumber();\\n    }\\n\\n    /// @inheritdoc IRelayHub\\n    /// @notice Uses `ArbSys` L2 block number specific to the Arbitrum Rollup.\\n    function getCreationBlock() external override virtual view returns (uint256){\\n        return arbCreationBlock;\\n    }\\n\\n    /// @return The block number in which the contract has been deployed.\\n    /// @notice Uses original L1 block number.\\n    function getL1CreationBlock() external view returns (uint256){\\n        return creationBlock;\\n    }\\n\\n    /// @notice Includes the 'storage gas' specific to the Arbitrum Rollup.\\n    /// @inheritdoc IRelayHub\\n    function aggregateGasleft() public override virtual view returns (uint256){\\n        return arbsys.getStorageGasAvailable() + gasleft();\\n    }\\n}\",\"keccak256\":\"0x93d393ac8d1b67fad0035fd36acd8fc176f4e61922ee391c2d8ceeed35fd531b\",\"license\":\"GPL-3.0-only\"},\"contracts-link/arbitrum/ArbSys.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\n/**\\n* @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface ArbSys {\\n\\n    /**\\n    * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n    * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint256);\\n}\",\"keccak256\":\"0x101af06ee07468c600f513ee59e1c525d4899bce9796623a508ce2b810ec21a0\",\"license\":\"GPL-3.0-only\"},\"contracts-link/forwarder/IForwarder.sol\":{\"content\":\"pragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title The Forwarder Interface\\n * @notice The contracts implementing this interface take a role of authorization, authentication and replay protection\\n * for contracts that choose to trust a `Forwarder`, instead of relying on a mechanism built into the Ethereum protocol.\\n *\\n * @notice if the `Forwarder` contract decides that an incoming `ForwardRequest` is valid, it must append 20 bytes that\\n * represent the caller to the `data` field of the request and send this new data to the target address (the `to` field)\\n *\\n * :warning: **Warning** :warning: The Forwarder can have a full control over a `Recipient` contract.\\n * Any vulnerability in a `Forwarder` implementation can make all of its `Recipient` contracts susceptible!\\n * Recipient contracts should only trust forwarders that passed through security audit,\\n * otherwise they are susceptible to identity theft.\\n */\\ninterface IForwarder is IERC165 {\\n\\n    /**\\n     * @notice A representation of a request for a `Forwarder` to send `data` on behalf of a `from` to a target (`to`).\\n     */\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n        uint256 validUntilTime;\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n    /**\\n     * @param from The address of a sender.\\n     * @return The nonce for this address.\\n     */\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * @notice Verify the transaction is valid and can be executed.\\n     * Implementations must validate the signature and the nonce of the request are correct.\\n     * Does not revert and returns successfully if the input is valid.\\n     * Reverts if any validation has failed. For instance, if either signature or nonce are incorrect.\\n     * Reverts if `domainSeparator` or `requestTypeHash` are not registered as well.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * @notice Executes a transaction specified by the `ForwardRequest`.\\n     * The transaction is first verified and then executed.\\n     * The success flag and returned bytes array of the `CALL` are returned as-is.\\n     *\\n     * This method would revert only in case of a verification error.\\n     *\\n     * All the target errors are reported using the returned success flag and returned bytes array.\\n     *\\n     * @param forwardRequest All requested transaction parameters.\\n     * @param domainSeparator The domain used when signing this request.\\n     * @param requestTypeHash The request type used when signing this request.\\n     * @param suffixData The ABI-encoded extension data for the current `RequestType` used when signing this request.\\n     * @param signature The client signature to be validated.\\n     *\\n     * @return success The success flag of the underlying `CALL` to the target address.\\n     * @return ret The byte array returned by the underlying `CALL` to the target address.\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * @notice Register a new Request typehash.\\n     *\\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\\n     *\\n     * @param typeName The name of the request type.\\n     * @param typeSuffix Any extra data after the generic params. Must contain add at least one param.\\n     * The generic ForwardRequest type is always registered by the constructor.\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * @notice Register a new domain separator.\\n     *\\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\\n     *\\n     * @notice The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`.\\n     * The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address.\\n     * This method accepts the domain name and version to create and register the domain separator value.\\n     * @param name The domain's display name.\\n     * @param version The domain/protocol version.\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\",\"keccak256\":\"0xef3d770001c3245db4408cdd0afdfc622695ccfe31f28b74571d05158bbf83f8\",\"license\":\"GPL-3.0-only\"},\"contracts-link/interfaces/IERC2771Recipient.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\n// SPDX-License-Identifier: MIT\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    /**\\n     * @return version The SemVer string of this Recipient's version.\\n     */\\n    function versionRecipient() external virtual view returns (string memory);\\n}\",\"keccak256\":\"0xdec934403bfbecdf4ac1f24de31cb7331651fea8d1ce5d6da62f5ef11b3ae98a\",\"license\":\"MIT\"},\"contracts-link/interfaces/IPaymaster.sol\":{\"content\":\"pragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\nimport \\\"../utils/GsnTypes.sol\\\";\\n\\n/**\\n * @title The Paymaster Interface\\n * @notice Contracts implementing this interface exist to make decision about paying the transaction fee to the relay.\\n *\\n * @notice There are two callbacks here that are executed by the RelayHub: `preRelayedCall` and `postRelayedCall`.\\n *\\n * @notice It is recommended that your implementation inherits from the abstract BasePaymaster contract.\\n*/\\ninterface IPaymaster is IERC165 {\\n    /**\\n     * @notice The limits this Paymaster wants to be imposed by the RelayHub on user input. See `getGasAndDataLimits`.\\n     */\\n    struct GasAndDataLimits {\\n        uint256 acceptanceBudget;\\n        uint256 preRelayedCallGasLimit;\\n        uint256 postRelayedCallGasLimit;\\n        uint256 calldataSizeLimit;\\n    }\\n\\n    /**\\n     * @notice Return the Gas Limits for Paymaster's functions and maximum msg.data length values for this Paymaster.\\n     * This function allows different paymasters to have different properties without changes to the RelayHub.\\n     * @return limits An instance of the `GasAndDataLimits` struct\\n     *\\n     * ##### `acceptanceBudget`\\n     * If the transactions consumes more than `acceptanceBudget` this Paymaster will be charged for gas no matter what.\\n     * Transaction that gets rejected after consuming more than `acceptanceBudget` gas is on this Paymaster's expense.\\n     *\\n     * Should be set to an amount gas this Paymaster expects to spend deciding whether to accept or reject a request.\\n     * This includes gas consumed by calculations in the `preRelayedCall`, `Forwarder` and the recipient contract.\\n     *\\n     * :warning: **Warning** :warning: As long this value is above `preRelayedCallGasLimit`\\n     * (see defaults in `BasePaymaster`), the Paymaster is guaranteed it will never pay for rejected transactions.\\n     * If this value is below `preRelayedCallGasLimit`, it might might make Paymaster open to a \\\"griefing\\\" attack.\\n     *\\n     * The relayers should prefer lower `acceptanceBudget`, as it improves their chances of being compensated.\\n     * From a Relay's point of view, this is the highest gas value a bad Paymaster may cost the relay,\\n     * since the paymaster will pay anything above that value regardless of whether the transaction succeeds or reverts.\\n     * Specifying value too high might make the call rejected by relayers (see `maxAcceptanceBudget` in server config).\\n     *\\n     * ##### `preRelayedCallGasLimit`\\n     * The max gas usage of preRelayedCall. Any revert of the `preRelayedCall` is a request rejection by the paymaster.\\n     * As long as `acceptanceBudget` is above `preRelayedCallGasLimit`, any such revert is not payed by the paymaster.\\n     *\\n     * ##### `postRelayedCallGasLimit`\\n     * The max gas usage of postRelayedCall. The Paymaster is not charged for the maximum, only for actually used gas.\\n     * Note that an OOG will revert the inner transaction, but the paymaster will be charged for it anyway.\\n     */\\n    function getGasAndDataLimits()\\n    external\\n    view\\n    returns (\\n        GasAndDataLimits memory limits\\n    );\\n\\n    /**\\n     * @notice :warning: **Warning** :warning: using incorrect Forwarder may cause the Paymaster to agreeing to pay for invalid transactions.\\n     * @return trustedForwarder The address of the `Forwarder` that is trusted by this Paymaster to execute the requests.\\n     */\\n    function getTrustedForwarder() external view returns (address trustedForwarder);\\n\\n    /**\\n     * @return relayHub The address of the `RelayHub` that is trusted by this Paymaster to execute the requests.\\n     */\\n    function getRelayHub() external view returns (address relayHub);\\n\\n    /**\\n     * @notice Called by the Relay in view mode and later by the `RelayHub` on-chain to validate that\\n     * the Paymaster agrees to pay for this call.\\n     *\\n     * :warning: **Warning** :warning: This method MUST be protected with `relayHubOnly()` in case it modifies state.\\n     *\\n     * The request is considered to be rejected by the Paymaster in one of the following conditions:\\n     *  - `preRelayedCall()` method reverts\\n     *  - the `Forwarder` reverts because of nonce or signature error\\n     *  - the `Paymaster` returned `rejectOnRecipientRevert: true` and the recipient contract reverted\\n     *    (and all that did not consume more than `acceptanceBudget` gas).\\n     *\\n     * In any of the above cases, all Paymaster calls and the recipient call are reverted.\\n     * In any other case the Paymaster will pay for the gas cost of the transaction.\\n     * Note that even if `postRelayedCall` is reverted the Paymaster will be charged.\\n     *\\n\\n     * @param relayRequest - the full relay request structure\\n     * @param signature - user's EIP712-compatible signature of the `relayRequest`.\\n     * Note that in most cases the paymaster shouldn't try use it at all. It is always checked\\n     * by the forwarder immediately after preRelayedCall returns.\\n     * @param approvalData - extra dapp-specific data (e.g. signature from trusted party)\\n     * @param maxPossibleGas - based on values returned from `getGasAndDataLimits`\\n     * the RelayHub will calculate the maximum possible amount of gas the user may be charged for.\\n     * In order to convert this value to wei, the Paymaster has to call \\\"relayHub.calculateCharge()\\\"\\n     *\\n     * @return context\\n     * A byte array to be passed to postRelayedCall.\\n     * Can contain any data needed by this Paymaster in any form or be empty if no extra data is needed.\\n     * @return rejectOnRecipientRevert\\n     * The flag that allows a Paymaster to \\\"delegate\\\" the rejection to the recipient code.\\n     * It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,\\n     * forwarder check and recipient checks must fit into the GasLimits.acceptanceBudget,\\n     * otherwise the TX is paid by the Paymaster.\\n     * `true` if the Paymaster wants to reject the TX if the recipient reverts.\\n     * `false` if the Paymaster wants rejects by the recipient to be completed on chain and paid by the Paymaster.\\n     */\\n    function preRelayedCall(\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint256 maxPossibleGas\\n    )\\n    external\\n    returns (bytes memory context, bool rejectOnRecipientRevert);\\n\\n    /**\\n     * @notice This method is called after the actual relayed function call.\\n     * It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call.\\n     *\\n     * :warning: **Warning** :warning: This method MUST be protected with relayHubOnly() in case it modifies state.\\n     *\\n     * Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster\\n     * is still committed to pay the relay for the entire transaction.\\n     *\\n     * @param context The call context, as returned by the preRelayedCall\\n     * @param success `true` if the relayed call succeeded, false if it reverted\\n     * @param gasUseWithoutPost The actual amount of gas used by the entire transaction, EXCEPT\\n     *        the gas used by the postRelayedCall itself.\\n     * @param relayData The relay params of the request. can be used by relayHub.calculateCharge()\\n     *\\n     */\\n    function postRelayedCall(\\n        bytes calldata context,\\n        bool success,\\n        uint256 gasUseWithoutPost,\\n        GsnTypes.RelayData calldata relayData\\n    ) external;\\n\\n    /**\\n     * @return version The SemVer string of this Paymaster's version.\\n     */\\n    function versionPaymaster() external view returns (string memory);\\n}\",\"keccak256\":\"0x7aa74ae28f33bd45355b2143566b90a5bf8326b977a44df69a2430bea282bd5f\",\"license\":\"GPL-3.0-only\"},\"contracts-link/interfaces/IRelayHub.sol\":{\"content\":\"pragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\nimport \\\"../utils/GsnTypes.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\n\\n/**\\n * @title The RelayHub interface\\n * @notice The implementation of this interface provides all the information the GSN client needs to\\n * create a valid `RelayRequest` and also serves as an entry point for such requests.\\n *\\n * @notice The RelayHub also handles all the related financial records and hold the balances of participants.\\n * The Paymasters keep their Ether deposited in the `RelayHub` in order to pay for the `RelayRequest`s that thay choose\\n * to pay for, and Relay Servers keep their earned Ether in the `RelayHub` until they choose to `withdraw()`\\n *\\n * @notice The RelayHub on each supported network only needs a single instance and there is usually no need for dApp\\n * developers or Relay Server operators to redeploy, reimplement, modify or override the `RelayHub`.\\n */\\ninterface IRelayHub is IERC165 {\\n    /**\\n     * @notice A struct that contains all the parameters of the `RelayHub` that can be modified after the deployment.\\n     */\\n    struct RelayHubConfig {\\n        // maximum number of worker accounts allowed per manager\\n        uint256 maxWorkerCount;\\n        // Gas set aside for all relayCall() instructions to prevent unexpected out-of-gas exceptions\\n        uint256 gasReserve;\\n        // Gas overhead to calculate gasUseWithoutPost\\n        uint256 postOverhead;\\n        // Gas cost of all relayCall() instructions after actual 'calculateCharge()'\\n        // Assume that relay has non-zero balance (costs 15'000 more otherwise).\\n        uint256 gasOverhead;\\n        // Minimum unstake delay seconds of a relay manager's stake on the StakeManager\\n        uint256 minimumUnstakeDelay;\\n        // Developers address\\n        address devAddress;\\n        // 0 < fee < 100, as percentage of total charge from paymaster to relayer\\n        uint8 devFee;\\n\\n    }\\n\\n    /// @notice Emitted when a configuration of the `RelayHub` is changed\\n    event RelayHubConfigured(RelayHubConfig config);\\n\\n    /// @notice Emitted when relays are added by a relayManager\\n    event RelayWorkersAdded(\\n        address indexed relayManager,\\n        address[] newRelayWorkers,\\n        uint256 workersCount\\n    );\\n\\n    /// @notice Emitted when an account withdraws funds from the `RelayHub`.\\n    event Withdrawn(\\n        address indexed account,\\n        address indexed dest,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when `depositFor` is called, including the amount and account that was funded.\\n    event Deposited(\\n        address indexed paymaster,\\n        address indexed from,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted for each token configured for staking in setMinimumStakes\\n    event StakingTokenDataChanged(\\n        address token,\\n        uint256 minimumStake\\n    );\\n\\n    /**\\n     * @notice Emitted when an attempt to relay a call fails and the `Paymaster` does not accept the transaction.\\n     * The actual relayed call was not executed, and the recipient not charged.\\n     * @param reason contains a revert reason returned from preRelayedCall or forwarder.\\n     */\\n    event TransactionRejectedByPaymaster(\\n        address indexed relayManager,\\n        address indexed paymaster,\\n        bytes32 indexed relayRequestID,\\n        address from,\\n        address to,\\n        address relayWorker,\\n        bytes4 selector,\\n        uint256 innerGasUsed,\\n        bytes reason\\n    );\\n\\n    /**\\n     * @notice Emitted when a transaction is relayed. Note that the actual internal function call might be reverted.\\n     * The reason for a revert will be indicated in the `status` field of a corresponding `RelayCallStatus` value.\\n     * @notice `charge` is the Ether value deducted from the `Paymaster` balance.\\n     * The amount added to the `relayManager` balance will be lower if there is an activated `devFee` in the `config`.\\n     */\\n    event TransactionRelayed(\\n        address indexed relayManager,\\n        address indexed relayWorker,\\n        bytes32 indexed relayRequestID,\\n        address from,\\n        address to,\\n        address paymaster,\\n        bytes4 selector,\\n        RelayCallStatus status,\\n        uint256 charge\\n    );\\n\\n    /// @notice This event is emitted in case the internal function returns a value or reverts with a revert string.\\n    event TransactionResult(\\n        RelayCallStatus status,\\n        bytes returnValue\\n    );\\n\\n    /// @notice This event is emitted in case this `RelayHub` is deprecated and will stop serving transactions soon.\\n    event HubDeprecated(uint256 deprecationTime);\\n\\n    /**\\n     * Error codes that describe all possible failure reasons reported in the `TransactionRelayed` event `status` field.\\n     *  @param OK The transaction was successfully relayed and execution successful - never included in the event.\\n     *  @param RelayedCallFailed The transaction was relayed, but the relayed call failed.\\n     *  @param RejectedByPreRelayed The transaction was not relayed due to preRelatedCall reverting.\\n     *  @param RejectedByForwarder The transaction was not relayed due to forwarder check (signature,nonce).\\n     *  @param PostRelayedFailed The transaction was relayed and reverted due to postRelatedCall reverting.\\n     *  @param PaymasterBalanceChanged The transaction was relayed and reverted due to the paymaster balance change.\\n     */\\n    enum RelayCallStatus {\\n        OK,\\n        RelayedCallFailed,\\n        RejectedByPreRelayed,\\n        RejectedByForwarder,\\n        RejectedByRecipientRevert,\\n        PostRelayedFailed,\\n        PaymasterBalanceChanged\\n    }\\n\\n    /**\\n     * @notice Add new worker addresses controlled by the sender who must be a staked Relay Manager address.\\n     * Emits a `RelayWorkersAdded` event.\\n     * This function can be called multiple times, emitting new events.\\n     */\\n    function addRelayWorkers(address[] calldata newRelayWorkers) external;\\n\\n    function verifyCanRegister(address relayManager) external;\\n\\n    // Balance management\\n\\n    /**\\n     * @notice Deposits ether for a `Paymaster`, so that it can and pay for relayed transactions.\\n     * :warning: **Warning** :warning: Unused balance can only be withdrawn by the holder itself, by calling `withdraw`.\\n     * Emits a `Deposited` event.\\n     */\\n    function depositFor(address target) external payable;\\n\\n    /**\\n     * @notice Withdraws from an account's balance, sending it back to the caller.\\n     * Relay Managers call this to retrieve their revenue, and `Paymasters` can also use it to reduce their funding.\\n     * Emits a `Withdrawn` event.\\n     */\\n    function withdraw(uint256 amount, address payable dest) external;\\n\\n    // Relaying\\n\\n    /**\\n     * @notice Relays a transaction. For this to succeed, multiple conditions must be met:\\n     *  - `Paymaster`'s `preRelayCall` method must succeed and not revert.\\n     *  - the `msg.sender` must be a registered Relay Worker that the user signed to use.\\n     *  - the transaction's gas fees must be equal or larger than the ones that were signed by the sender.\\n     *  - the transaction must have enough gas to run all internal transactions if they use all gas available to them.\\n     *  - the `Paymaster` must have enough balance to pay the Relay Worker if all gas is spent.\\n     *\\n     * @notice If all conditions are met, the call will be relayed and the `Paymaster` charged.\\n     *\\n     * @param maxAcceptanceBudget The maximum valid value for `paymaster.getGasLimits().acceptanceBudget` to return.\\n     * @param relayRequest All details of the requested relayed call.\\n     * @param signature The client's EIP-712 signature over the `relayRequest` struct.\\n     * @param approvalData The dapp-specific data forwarded to the `Paymaster`'s `preRelayedCall` method.\\n     * This value is **not** verified by the `RelayHub` in any way.\\n     * As an example, it can be used to pass some kind of a third-party signature to the `Paymaster` for verification.\\n     *\\n     * Emits a `TransactionRelayed` event regardless of whether the transaction succeeded or failed.\\n     */\\n    function relayCall(\\n        uint256 maxAcceptanceBudget,\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData\\n    )\\n    external\\n    returns (bool paymasterAccepted, bytes memory returnValue);\\n\\n    /**\\n     * @notice In case the Relay Worker has been found to be in violation of some rules by the `Penalizer` contract,\\n     * the `Penalizer` will call this method to execute a penalization.\\n     * The `RelayHub` will look up the Relay Manager of the given Relay Worker and will forward the call to\\n     * the `StakeManager` contract. The `RelayHub` does not perform the actual penalization either.\\n     * @param relayWorker The address of the Relay Worker that committed a penalizable offense.\\n     * @param beneficiary The address that called the `Penalizer` and will receive a reward for it.\\n     */\\n    function penalize(address relayWorker, address payable beneficiary) external;\\n\\n    /**\\n     * @notice Sets or changes the configuration of this `RelayHub`.\\n     * @param _config The new configuration.\\n     */\\n    function setConfiguration(RelayHubConfig memory _config) external;\\n\\n    /**\\n     * @notice Sets or changes the minimum amount of a given `token` that needs to be staked so that the Relay Manager\\n     * is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking.\\n     * @param token An array of addresses of ERC-20 compatible tokens.\\n     * @param minimumStake An array of minimal amounts necessary for a corresponding token, in wei.\\n     */\\n    function setMinimumStakes(IERC20[] memory token, uint256[] memory minimumStake) external;\\n\\n    /**\\n     * @notice Deprecate hub by reverting all incoming `relayCall()` calls starting from a given timestamp\\n     * @param _deprecationTime The timestamp in seconds after which the `RelayHub` stops serving transactions.\\n     */\\n    function deprecateHub(uint256 _deprecationTime) external;\\n\\n    /**\\n     * @notice The fee is expressed as a base fee in wei plus percentage of the actual charge.\\n     * For example, a value '40' stands for a 40% fee, so the recipient will be charged for 1.4 times the spent amount.\\n     * @param gasUsed An amount of gas used by the transaction.\\n     * @param relayData The details of a transaction signed by the sender.\\n     * @return The calculated charge, in wei.\\n     */\\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) external view returns (uint256);\\n\\n    /**\\n     * @notice The fee is expressed as a  percentage of the actual charge.\\n     * For example, a value '40' stands for a 40% fee, so the Relay Manager will only get 60% of the `charge`.\\n     * @param charge The amount of Ether in wei the Paymaster will be charged for this transaction.\\n     * @return The calculated devFee, in wei.\\n     */\\n    function calculateDevCharge(uint256 charge) external view returns (uint256);\\n    /* getters */\\n\\n    /// @return config The configuration of the `RelayHub`.\\n    function getConfiguration() external view returns (RelayHubConfig memory config);\\n\\n    /**\\n     * @param token An address of an ERC-20 compatible tokens.\\n     * @return The minimum amount of a given `token` that needs to be staked so that the Relay Manager\\n     * is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking.\\n     */\\n    function getMinimumStakePerToken(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @param worker An address of the Relay Worker.\\n     * @return The address of its Relay Manager.\\n     */\\n    function getWorkerManager(address worker) external view returns (address);\\n\\n    /**\\n     * @param manager An address of the Relay Manager.\\n     * @return The count of Relay Workers associated with this Relay Manager.\\n     */\\n    function getWorkerCount(address manager) external view returns (uint256);\\n\\n    /// @return An account's balance. It can be either a deposit of a `Paymaster`, or a revenue of a Relay Manager.\\n    function balanceOf(address target) external view returns (uint256);\\n\\n    /// @return The `StakeManager` address for this `RelayHub`.\\n    function getStakeManager() external view returns (IStakeManager);\\n\\n    /// @return The `Penalizer` address for this `RelayHub`.\\n    function getPenalizer() external view returns (address);\\n\\n    /// @return The `RelayRegistrar` address for this `RelayHub`.\\n    function getRelayRegistrar() external view returns (address);\\n\\n    /// @return The `BatchGateway` address for this `RelayHub`.\\n    function getBatchGateway() external view returns (address);\\n\\n    /**\\n     * @notice Uses `StakeManager` to decide if the Relay Manager can be considered staked or not.\\n     * Returns if the stake's token, amount and delay satisfy all requirements, reverts otherwise.\\n     */\\n    function verifyRelayManagerStaked(address relayManager) external view;\\n\\n    /// @return `true` if the `RelayHub` is deprecated, `false` it it is not deprecated and can serve transactions.\\n    function isDeprecated() external view returns (bool);\\n\\n    /// @return The timestamp from which the hub no longer allows relaying calls.\\n    function getDeprecationTime() external view returns (uint256);\\n\\n    /// @return The block number in which the contract has been deployed.\\n    function getCreationBlock() external view returns (uint256);\\n\\n    /// @return a SemVer-compliant version of the `RelayHub` contract.\\n    function versionHub() external view returns (string memory);\\n\\n    /// @return A total measurable amount of gas left to current execution. Same as 'gasleft()' for pure EVMs.\\n    function aggregateGasleft() external view returns (uint256);\\n}\",\"keccak256\":\"0x1deca98ec75598091bf5d5ce7bd2720619d4f1bbede2f0357b08cf5d6ec19318\",\"license\":\"GPL-3.0-only\"},\"contracts-link/interfaces/IRelayRegistrar.sol\":{\"content\":\"pragma solidity ^0.8.6;\\n\\n//SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title The RelayRegistrar Interface\\n * @notice The on-chain registrar for all registered Relay Managers.\\n *\\n * @notice The client can use an implementation of a `RelayRegistrar` to find relay registration info.\\n *\\n */\\ninterface IRelayRegistrar is IERC165 {\\n\\n    /**\\n     * @notice A struct containing all the information necessary to client to interact with the Relay Server.\\n     */\\n    struct RelayInfo {\\n        //last registration block number\\n        uint32 lastSeenBlockNumber;\\n        //last registration block timestamp\\n        uint40 lastSeenTimestamp;\\n        //stake (first registration) block number\\n        uint32 firstSeenBlockNumber;\\n        //stake (first registration) block timestamp\\n        uint40 firstSeenTimestamp;\\n        uint80 baseRelayFee;\\n        uint16 pctRelayFee;\\n        bytes32[3] urlParts;\\n        address relayManager;\\n    }\\n\\n    /**\\n     * @notice Emitted when a relay server registers or updates its details.\\n     * Looking up these events allows a client to discover registered Relay Servers.\\n     */\\n    event RelayServerRegistered(\\n        address indexed relayManager,\\n        uint256 baseRelayFee,\\n        uint256 pctRelayFee,\\n        bytes32[3] relayUrl\\n    );\\n\\n    /**\\n     * @notice This function is called by Relay Servers in order to register or to update their registration.\\n     * @param relayHub The address of the `RelayHub` contract for which this action is performed.\\n     * @param baseRelayFee The base fee the Relay Server charges for a single transaction in Ether, in wei.\\n     * @param pctRelayFee The percent of the total charge to add as a Relay Server fee to the total charge.\\n     * @param url The URL of the Relay Server that is listening to the clients' requests.\\n     */\\n    function registerRelayServer(\\n        address relayHub,\\n        uint80 baseRelayFee,\\n        uint16 pctRelayFee,\\n        bytes32[3] calldata url\\n    ) external;\\n\\n    /**\\n     * @return The block number in which the contract has been deployed.\\n     */\\n    function getCreationBlock() external view returns (uint256);\\n\\n    /**\\n     * @param relayManager An address of a Relay Manager.\\n     * @param relayHub The address of the `RelayHub` contract for which this action is performed.\\n     * @return info All the details of the given Relay Manager's registration. Throws if relay not found for `RelayHub`.\\n     */\\n    function getRelayInfo(address relayHub, address relayManager) external view returns (RelayInfo memory info);\\n\\n    /**\\n     * @notice Read relay info of registered Relay Server from an on-chain storage.\\n     * @param relayHub The address of the `RelayHub` contract for which this action is performed.\\n     * @param maxCount The maximum amount of relays to be returned by this function.\\n     * @param oldestBlockNumber The latest block number in which a Relay Server may be registered.\\n     * @param oldestBlockTimestamp The latest block timestamp in which a Relay Server may be registered.\\n     * @return info The list of `RelayInfo`s of registered Relay Servers\\n     */\\n    function readRelayInfos(\\n        address relayHub,\\n        uint256 oldestBlockNumber,\\n        uint256 oldestBlockTimestamp,\\n        uint256 maxCount\\n    ) external view returns (\\n        RelayInfo[] memory info\\n    );\\n}\",\"keccak256\":\"0x31c700100829a2f388bd552d7f02e9728b6baed4939d95b3b8c1ba9847aff7ff\",\"license\":\"GPL-3.0-only\"},\"contracts-link/interfaces/IStakeManager.sol\":{\"content\":\"pragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title The StakeManager Interface\\n * @notice In order to prevent an attacker from registering a large number of unresponsive relays, the GSN requires\\n * the Relay Server to maintain a permanently locked stake in the system before being able to register.\\n *\\n * @notice Also, in some cases the behavior of a Relay Server may be found to be illegal by a `Penalizer` contract.\\n * In such case, the stake will never be returned to the Relay Server operator and will be slashed.\\n *\\n * @notice An implementation of this interface is tasked with keeping Relay Servers' stakes, made in any ERC-20 token.\\n * Note that the `RelayHub` chooses which ERC-20 tokens to support and how much stake is needed.\\n */\\ninterface IStakeManager {\\n\\n    /// @notice Emitted when a `stake` or `unstakeDelay` are initialized or increased.\\n    event StakeAdded(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 stake,\\n        uint256 unstakeDelay\\n    );\\n\\n    /// @notice Emitted once a stake is scheduled for withdrawal.\\n    event StakeUnlocked(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 withdrawTime\\n    );\\n\\n    /// @notice Emitted when owner withdraws `relayManager` funds.\\n    event StakeWithdrawn(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when an authorized `RelayHub` penalizes a `relayManager`.\\n    event StakePenalized(\\n        address indexed relayManager,\\n        address indexed beneficiary,\\n        IERC20 token,\\n        uint256 reward\\n    );\\n\\n    /// @notice Emitted when a `relayManager` adds a new `RelayHub` to a list of authorized.\\n    event HubAuthorized(\\n        address indexed relayManager,\\n        address indexed relayHub\\n    );\\n\\n    /// @notice Emitted when a `relayManager` removes a `RelayHub` from a list of authorized.\\n    event HubUnauthorized(\\n        address indexed relayManager,\\n        address indexed relayHub,\\n        uint256 removalTime\\n    );\\n\\n    /// @notice Emitted when a `relayManager` sets its `owner`. This is necessary to prevent stake hijacking.\\n    event OwnerSet(\\n        address indexed relayManager,\\n        address indexed owner\\n    );\\n\\n    /// @notice Emitted when a `burnAddress` is changed.\\n    event BurnAddressSet(\\n        address indexed burnAddress\\n    );\\n\\n    /**\\n     * @param stake - amount of ether staked for this relay\\n     * @param unstakeDelay - number of seconds to elapse before the owner can retrieve the stake after calling 'unlock'\\n     * @param withdrawTime - timestamp in seconds when 'withdraw' will be callable, or zero if the unlock has not been called\\n     * @param owner - address that receives revenue and manages relayManager's stake\\n     */\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelay;\\n        uint256 withdrawTime;\\n        IERC20 token;\\n        address owner;\\n    }\\n\\n    struct RelayHubInfo {\\n        uint256 removalTime;\\n    }\\n\\n    /**\\n     * @notice Set the owner of a Relay Manager. Called only by the RelayManager itself.\\n     * Note that owners cannot transfer ownership - if the entry already exists, reverts.\\n     * @param owner - owner of the relay (as configured off-chain)\\n     */\\n    function setRelayManagerOwner(address owner) external;\\n\\n    /**\\n     * @notice Put a stake for a relayManager and set its unstake delay.\\n     * Only the owner can call this function. If the entry does not exist, reverts.\\n     * The owner must give allowance of the ERC-20 token to the StakeManager before calling this method.\\n     * It is the RelayHub who has a configurable list of minimum stakes per token. StakeManager accepts all tokens.\\n     * @param token The address of an ERC-20 token that is used by the relayManager as a stake\\n     * @param relayManager The address that represents a stake entry and controls relay registrations on relay hubs\\n     * @param unstakeDelay The number of seconds to elapse before an owner can retrieve the stake after calling `unlock`\\n     * @param amount The amount of tokens to be taken from the relayOwner and locked in the StakeManager as a stake\\n     */\\n    function stakeForRelayManager(IERC20 token, address relayManager, uint256 unstakeDelay, uint256 amount) external;\\n\\n    /**\\n     * @notice Schedule the unlocking of the stake. The `unstakeDelay` must pass before owner can call `withdrawStake`.\\n     * @param relayManager The address of a Relay Manager whose stake is to be unlocked.\\n     */\\n    function unlockStake(address relayManager) external;\\n    /**\\n     * @notice Withdraw the unlocked stake.\\n     * @param relayManager The address of a Relay Manager whose stake is to be withdrawn.\\n     */\\n    function withdrawStake(address relayManager) external;\\n\\n    /**\\n     * @notice Add the `RelayHub` to a list of authorized by this Relay Manager.\\n     * This allows the RelayHub to penalize this Relay Manager. The `RelayHub` cannot trust a Relay it cannot penalize.\\n     * @param relayManager The address of a Relay Manager whose stake is to be authorized for the new `RelayHub`.\\n     * @param relayHub The address of a `RelayHub` to be authorized.\\n     */\\n    function authorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    /**\\n     * @notice Same as `authorizeHubByOwner` but can be called by the RelayManager itself.\\n     */\\n    function authorizeHubByManager(address relayHub) external;\\n\\n    /**\\n     * @notice Remove the `RelayHub` from a list of authorized by this Relay Manager.\\n     * @param relayManager The address of a Relay Manager.\\n     * @param relayHub The address of a `RelayHub` to be unauthorized.\\n     */\\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    /**\\n     * @notice Same as `unauthorizeHubByOwner` but can be called by the RelayManager itself.\\n     */\\n    function unauthorizeHubByManager(address relayHub) external;\\n\\n    /**\\n     * Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns part of stake on the way.\\n     * @param relayManager The address of a Relay Manager to be penalized.\\n     * @param beneficiary The address that receives part of the penalty amount.\\n     * @param amount A total amount of penalty to be withdrawn from stake.\\n     */\\n    function penalizeRelayManager(address relayManager, address beneficiary, uint256 amount) external;\\n\\n    /**\\n     * @notice Get the stake details information for the given Relay Manager.\\n     * @param relayManager The address of a Relay Manager.\\n     * @return stakeInfo The `StakeInfo` structure.\\n     * @return isSenderAuthorizedHub `true` if the `msg.sender` for this call was a `RelayHub` that is authorized now.\\n     * `false` if the `msg.sender` for this call is not authorized.\\n     */\\n    function getStakeInfo(address relayManager) external view returns (StakeInfo memory stakeInfo, bool isSenderAuthorizedHub);\\n\\n    /**\\n     * @return The maximum unstake delay this `StakeManger` allows. This is to prevent locking money forever by mistake.\\n     */\\n    function getMaxUnstakeDelay() external view returns (uint256);\\n\\n    /**\\n     * @notice Change the address that will receive the 'burned' part of the penalized stake.\\n     * This is done to prevent malicious Relay Server from penalizing itself and breaking even.\\n     */\\n    function setBurnAddress(address _burnAddress) external;\\n\\n    /**\\n     * @return The address that will receive the 'burned' part of the penalized stake.\\n     */\\n    function getBurnAddress() external view returns (address);\\n\\n    /**\\n     * @return the block number in which the contract has been deployed.\\n     */\\n    function getCreationBlock() external view returns (uint256);\\n\\n    /**\\n     * @return a SemVer-compliant version of the `StakeManager` contract.\\n     */\\n    function versionSM() external view returns (string memory);\\n}\",\"keccak256\":\"0xfa36dc58dc75bdc830127c1230d0330df20107e1648fe3fc53fa5406eae26ec7\",\"license\":\"GPL-3.0-only\"},\"contracts-link/utils/GsnEip712Library.sol\":{\"content\":\"pragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../utils/GsnTypes.sol\\\";\\nimport \\\"../interfaces/IERC2771Recipient.sol\\\";\\nimport \\\"../forwarder/IForwarder.sol\\\";\\n\\nimport \\\"./GsnUtils.sol\\\";\\n\\n/**\\n * @title The ERC-712 Library for GSN\\n * @notice Bridge Library to convert a GSN RelayRequest into a valid `ForwardRequest` for a `Forwarder`.\\n */\\nlibrary GsnEip712Library {\\n    // maximum length of return value/revert reason for 'execute' method. Will truncate result if exceeded.\\n    uint256 private constant MAX_RETURN_SIZE = 1024;\\n\\n    //copied from Forwarder (can't reference string constants even from another library)\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTime\\\";\\n\\n    bytes public constant RELAYDATA_TYPE = \\\"RelayData(uint256 maxFeePerGas,uint256 maxPriorityFeePerGas,uint256 pctRelayFee,uint256 baseRelayFee,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)\\\";\\n\\n    string public constant RELAY_REQUEST_NAME = \\\"RelayRequest\\\";\\n    string public constant RELAY_REQUEST_SUFFIX = string(abi.encodePacked(\\\"RelayData relayData)\\\", RELAYDATA_TYPE));\\n\\n    bytes public constant RELAY_REQUEST_TYPE = abi.encodePacked(\\n        RELAY_REQUEST_NAME,\\\"(\\\",GENERIC_PARAMS,\\\",\\\", RELAY_REQUEST_SUFFIX);\\n\\n    bytes32 public constant RELAYDATA_TYPEHASH = keccak256(RELAYDATA_TYPE);\\n    bytes32 public constant RELAY_REQUEST_TYPEHASH = keccak256(RELAY_REQUEST_TYPE);\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = keccak256(\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n    );\\n\\n    function splitRequest(\\n        GsnTypes.RelayRequest calldata req\\n    )\\n    internal\\n    pure\\n    returns (\\n        bytes memory suffixData\\n    ) {\\n        suffixData = abi.encode(\\n            hashRelayData(req.relayData));\\n    }\\n\\n    //verify that the recipient trusts the given forwarder\\n    // MUST be called by paymaster\\n    function verifyForwarderTrusted(GsnTypes.RelayRequest calldata relayRequest) internal view {\\n        (bool success, bytes memory ret) = relayRequest.request.to.staticcall(\\n            abi.encodeWithSelector(\\n                IERC2771Recipient.isTrustedForwarder.selector, relayRequest.relayData.forwarder\\n            )\\n        );\\n        require(success, \\\"isTrustedForwarder: reverted\\\");\\n        require(ret.length == 32, \\\"isTrustedForwarder: bad response\\\");\\n        require(abi.decode(ret, (bool)), \\\"invalid forwarder for recipient\\\");\\n    }\\n\\n    function verifySignature(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal view {\\n        (bytes memory suffixData) = splitRequest(relayRequest);\\n        bytes32 _domainSeparator = domainSeparator(relayRequest.relayData.forwarder);\\n        IForwarder forwarder = IForwarder(payable(relayRequest.relayData.forwarder));\\n        forwarder.verify(relayRequest.request, _domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature);\\n    }\\n\\n    function verify(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal view {\\n        verifyForwarderTrusted(relayRequest);\\n        verifySignature(relayRequest, signature);\\n    }\\n\\n    function execute(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature) internal returns (bool forwarderSuccess, bool callSuccess, bytes memory ret) {\\n        (bytes memory suffixData) = splitRequest(relayRequest);\\n        bytes32 _domainSeparator = domainSeparator(relayRequest.relayData.forwarder);\\n        /* solhint-disable-next-line avoid-low-level-calls */\\n        (forwarderSuccess, ret) = relayRequest.relayData.forwarder.call(\\n            abi.encodeWithSelector(IForwarder.execute.selector,\\n            relayRequest.request, _domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature\\n        ));\\n        if ( forwarderSuccess ) {\\n\\n          //decode return value of execute:\\n          (callSuccess, ret) = abi.decode(ret, (bool, bytes));\\n        }\\n        truncateInPlace(ret);\\n    }\\n\\n    //truncate the given parameter (in-place) if its length is above the given maximum length\\n    // do nothing otherwise.\\n    //NOTE: solidity warns unless the method is marked \\\"pure\\\", but it DOES modify its parameter.\\n    function truncateInPlace(bytes memory data) internal pure {\\n        MinLibBytes.truncateInPlace(data, MAX_RETURN_SIZE);\\n    }\\n\\n    function domainSeparator(address forwarder) internal view returns (bytes32) {\\n        return hashDomain(EIP712Domain({\\n            name : \\\"GSN Relayed Transaction\\\",\\n            version : \\\"2\\\",\\n            chainId : getChainID(),\\n            verifyingContract : forwarder\\n            }));\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function hashDomain(EIP712Domain memory req) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                EIP712DOMAIN_TYPEHASH,\\n                keccak256(bytes(req.name)),\\n                keccak256(bytes(req.version)),\\n                req.chainId,\\n                req.verifyingContract));\\n    }\\n\\n    function hashRelayData(GsnTypes.RelayData calldata req) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                RELAYDATA_TYPEHASH,\\n                req.maxFeePerGas,\\n                req.maxPriorityFeePerGas,\\n                req.pctRelayFee,\\n                req.baseRelayFee,\\n                req.relayWorker,\\n                req.paymaster,\\n                req.forwarder,\\n                keccak256(req.paymasterData),\\n                req.clientId\\n            ));\\n    }\\n}\",\"keccak256\":\"0x065c7176fff9b3d1ba9888a54559765082f63c25e242090faf4d64af7a14f3b9\",\"license\":\"GPL-3.0-only\"},\"contracts-link/utils/GsnTypes.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../forwarder/IForwarder.sol\\\";\\n\\ninterface GsnTypes {\\n    /// @notice maxFeePerGas, maxPriorityFeePerGas, pctRelayFee and baseRelayFee must be validated inside of the paymaster's preRelayedCall in order not to overpay\\n    struct RelayData {\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        uint256 pctRelayFee;\\n        uint256 baseRelayFee;\\n        uint256 transactionCalldataGasUsed;\\n        address relayWorker;\\n        address paymaster;\\n        address forwarder;\\n        bytes paymasterData;\\n        uint256 clientId;\\n    }\\n\\n    //note: must start with the ForwardRequest to be an extension of the generic forwarder\\n    struct RelayRequest {\\n        IForwarder.ForwardRequest request;\\n        RelayData relayData;\\n    }\\n}\",\"keccak256\":\"0x3724fd8d48d2a89cfa65993cd99115a93828d090597cd8bc197bb2d46bc76315\",\"license\":\"GPL-3.0-only\"},\"contracts-link/utils/GsnUtils.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n/* solhint-disable no-inline-assembly */\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../utils/MinLibBytes.sol\\\";\\nimport \\\"./GsnTypes.sol\\\";\\n\\n/**\\n * @title The GSN Solidity Utils Library\\n * @notice Some library functions used throughout the GSN Solidity codebase.\\n */\\nlibrary GsnUtils {\\n\\n    /**\\n     * @notice Calculate an identifier for the meta-transaction in a format similar to a transaction hash.\\n     * Note that uniqueness relies on signature and may not be enforced if meta-transactions are verified\\n     * with a different algorithm, e.g. when batching.\\n     * @param relayRequest The `RelayRequest` for which an ID is being calculated.\\n     * @param signature The signature for the `RelayRequest`. It is not validated here and may even remain empty.\\n     */\\n    function getRelayRequestID(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature)\\n    internal\\n    pure\\n    returns (bytes32) {\\n        return keccak256(abi.encode(relayRequest.request.from, relayRequest.request.nonce, signature));\\n    }\\n\\n    /**\\n     * @notice Extract the method identifier signature from the encoded function call.\\n     */\\n    function getMethodSig(bytes memory msgData) internal pure returns (bytes4) {\\n        return MinLibBytes.readBytes4(msgData, 0);\\n    }\\n\\n    /**\\n     * @notice Extract a parameter from encoded-function block.\\n     * see: https://solidity.readthedocs.io/en/develop/abi-spec.html#formal-specification-of-the-encoding\\n     * The return value should be casted to the right type (`uintXXX`/`bytesXXX`/`address`/`bool`/`enum`).\\n     * @param msgData Byte array containing a uint256 value.\\n     * @param index Index in byte array of uint256 value.\\n     * @return result uint256 value from byte array.\\n     */\\n    function getParam(bytes memory msgData, uint256 index) internal pure returns (uint256 result) {\\n        return MinLibBytes.readUint256(msgData, 4 + index * 32);\\n    }\\n\\n    /// @notice Re-throw revert with the same revert data.\\n    function revertWithData(bytes memory data) internal pure {\\n        assembly {\\n            revert(add(data,32), mload(data))\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x373775daa2faa00988d02ed340eb99db70f005a303e2d679f97bee04026e50d6\",\"license\":\"GPL-3.0-only\"},\"contracts-link/utils/MinLibBytes.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// SPDX-License-Identifier: MIT\\n// minimal bytes manipulation required by GSN\\n// a minimal subset from 0x/LibBytes\\n/* solhint-disable no-inline-assembly */\\n\\nlibrary MinLibBytes {\\n\\n    //truncate the given parameter (in-place) if its length is above the given maximum length\\n    // do nothing otherwise.\\n    //NOTE: solidity warns unless the method is marked \\\"pure\\\", but it DOES modify its parameter.\\n    function truncateInPlace(bytes memory data, uint256 maxlen) internal pure {\\n        if (data.length > maxlen) {\\n            assembly { mstore(data, maxlen) }\\n        }\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        require (b.length >= index + 20, \\\"readAddress: data too short\\\");\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        require(b.length >= index + 32, \\\"readBytes32: data too short\\\" );\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    function readBytes4(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        require(b.length >= index + 4, \\\"readBytes4: data too short\\\");\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n}\",\"keccak256\":\"0xa61a3d8fcd89182975d0bd17b86c22b6affd2f7bf26db66b1ddb2ee396f122ab\",\"license\":\"MIT\"},\"contracts-link/utils/RelayHubValidator.sol\":{\"content\":\"pragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\nimport \\\"../utils/GsnTypes.sol\\\";\\n\\n/**\\n * @title The RelayHub Validator Library\\n * @notice Validates the `msg.data` received by the `RelayHub` does not contain unnecessary bytes.\\n * Including these extra bytes would allow the Relay Server to inflate transaction costs and overcharge the client.\\n */\\nlibrary RelayHubValidator {\\n\\n    /// @notice Validate that encoded `relayCall` is properly packed without any extra bytes\\n    function verifyTransactionPacking(\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData\\n    ) internal pure {\\n        // abicoder v2: https://docs.soliditylang.org/en/latest/abi-spec.html\\n        // each static param/member is 1 word\\n        // struct (with dynamic members) has offset to struct which is 1 word\\n        // dynamic member is 1 word offset to actual value, which is 1-word length and ceil(length/32) words for data\\n        // relayCall has 5 method params,\\n        // relayRequest: 2 members\\n        // relayData 9 members\\n        // ForwardRequest: 7 members\\n        // total 22 32-byte words if all dynamic params are zero-length.\\n        uint256 expectedMsgDataLen = 4 + 23 * 32 +\\n            dynamicParamSize(signature) +\\n            dynamicParamSize(approvalData) +\\n            dynamicParamSize(relayRequest.request.data) +\\n            dynamicParamSize(relayRequest.relayData.paymasterData);\\n        // zero-length signature is allowed in a batch relay transaction\\n        require(signature.length <= 65, \\\"invalid signature length\\\");\\n        require(expectedMsgDataLen == msg.data.length, \\\"extra msg.data bytes\\\" );\\n    }\\n\\n    // helper method for verifyTransactionPacking:\\n    // size (in bytes) of the given \\\"bytes\\\" parameter. size include the length (32-byte word),\\n    // and actual data size, rounded up to full 32-byte words\\n    function dynamicParamSize(bytes calldata buf) internal pure returns (uint256) {\\n        return 32 + ((buf.length + 31) & (type(uint256).max - 31));\\n    }\\n}\",\"keccak256\":\"0x14d2f7da7a198b3cacc3bfbc908ee651a2652668ee455d823467e908647687c4\",\"license\":\"GPL-3.0-only\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604052600019600b553480156200001857600080fd5b50604051620045e2380380620045e28339810160408190526200003b9162000316565b84848484846200004b336200012e565b43610100526001600160601b0319606086811b821660805285811b821660a05284811b821660c05283901b1660e05262000085816200017e565b5050505050856001600160a01b0316610120816001600160a01b031660601b81525050856001600160a01b031663a3b1b31d6040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e257600080fd5b505afa158015620000f7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011d91906200043e565b610140525062000471945050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b03163314620001de5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60648160c0015160ff16106200022a5760405162461bcd60e51b815260206004820152601060248201526f0c8caec40cccaca40e8dede40d0d2ced60831b6044820152606401620001d5565b80516001819055602080830151600281905560408085015160038190556060808701516004819055608080890151600581905560a0808b01516006805460c0808f01516001600160a01b039485166001600160a81b031990931692909217600160a01b60ff9384160217928390558a519d8e529b8d019a909a52978b019690965293890192909252870152908216858201521c16908201527ffd0fe4fa2d954b682752f887632a7d7edc955bc7691dba63ff3fa867cf7895f59060e00160405180910390a150565b8051620002ff8162000458565b919050565b805160ff81168114620002ff57600080fd5b6000806000806000808688036101808112156200033257600080fd5b87516200033f8162000458565b6020890151909750620003528162000458565b6040890151909650620003658162000458565b6060890151909550620003788162000458565b60808901519094506200038b8162000458565b925060e0609f1982011215620003a057600080fd5b5060405160e081016001600160401b0381118282101715620003d257634e487b7160e01b600052604160045260246000fd5b806040525060a0880151815260c0880151602082015260e0880151604082015261010088015160608201526101208801516080820152620004176101408901620002f2565b60a08201526200042b610160890162000304565b60c0820152809150509295509295509295565b6000602082840312156200045157600080fd5b5051919050565b6001600160a01b03811681146200046e57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c610100516101205160601c610140516140dd6200050560003960006102580152600081816104db01526108d001526000610598015260006102bf01526000818161071c015261165701526000818161041901526120fd0152600081816105e301528181611e6e015281816121db01526122d501526140dd6000f3fe6080604052600436106101ed5760003560e01c8063a51c8cb91161010d578063ca76fe78116100a0578063e6e22e121161006f578063e6e22e12146106ad578063ebcd31ac146106cd578063f2fde38b146106ed578063f7908a741461070d578063f8ba1e981461074057600080fd5b8063ca76fe7814610607578063d17da3e814610627578063d904c73214610655578063ddf737891461067757600080fd5b8063c2da0786116100dc578063c2da078614610569578063c5c98a1a14610589578063c7178230146105bc578063ca64f9e7146105d457600080fd5b8063a51c8cb9146104c9578063aa67c919146104fd578063af595dfc14610510578063be7c76ad1461053057600080fd5b80636bd50cef116101855780638a09fb56116101545780638a09fb561461043d5780638ac3b8451461045d5780638da5cb5b1461047d5780639b199b861461049b57600080fd5b80636bd50cef1461034d57806370a08231146103bf578063715018a6146103f557806375dc7b4e1461040a57600080fd5b806345bdade7116101c157806345bdade71461029b57806351d85156146102b057806359c4afc0146102f757806368738b471461032d57600080fd5b8062f714ce146101f257806301ffc9a71461021457806320ffd56d146102495780633c16e59a14610286575b600080fd5b3480156101fe57600080fd5b5061021261020d366004613629565b610760565b005b34801561022057600080fd5b5061023461022f36600461330b565b610879565b60405190151581526020015b60405180910390f35b34801561025557600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b604051908152602001610240565b34801561029257600080fd5b50600b54610278565b3480156102a757600080fd5b506102786108cb565b3480156102bc57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610240565b34801561030357600080fd5b5061027861031236600461311b565b6001600160a01b031660009081526009602052604090205490565b34801561033957600080fd5b5061027861034836600461364e565b61096e565b34801561035957600080fd5b506103626109ea565b6040516102409190815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301516001600160a01b03169082015260c09182015160ff169181019190915260e00190565b3480156103cb57600080fd5b506102786103da36600461311b565b6001600160a01b03166000908152600a602052604090205490565b34801561040157600080fd5b50610212610a8c565b34801561041657600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102df565b34801561044957600080fd5b506102126104583660046131e5565b610ac2565b34801561046957600080fd5b506102786104783660046135f7565b610c3b565b34801561048957600080fd5b506000546001600160a01b03166102df565b3480156104a757600080fd5b506104bb6104b636600461349e565b610c70565b604051610240929190613b7d565b3480156104d557600080fd5b506102df7f000000000000000000000000000000000000000000000000000000000000000081565b61021261050b36600461311b565b6110ae565b34801561051c57600080fd5b5061021261052b3660046135f7565b61118e565b34801561053c57600080fd5b506102df61054b36600461311b565b6001600160a01b039081166000908152600860205260409020541690565b34801561057557600080fd5b50610212610584366004613171565b61123a565b34801561059557600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610278565b3480156105c857600080fd5b50600b54421015610234565b3480156105e057600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102df565b34801561061357600080fd5b50610212610622366004613425565b61141d565b34801561063357600080fd5b50610647610642366004613691565b611553565b604051610240929190613b24565b34801561066157600080fd5b5061066a611e2a565b6040516102409190613b9d565b34801561068357600080fd5b5061027861069236600461311b565b6001600160a01b031660009081526007602052604090205490565b3480156106b957600080fd5b506102126106c836600461311b565b611e4a565b3480156106d957600080fd5b506102126106e8366004613138565b6120f2565b3480156106f957600080fd5b5061021261070836600461311b565b612339565b34801561071957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102df565b34801561074c57600080fd5b5061021261075b36600461311b565b6123d4565b336000818152600a60205260409020548311156107b95760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b60448201526064015b60405180910390fd5b6001600160a01b0381166000908152600a60205260409020546107dc9084612435565b6001600160a01b038083166000908152600a60205260408082209390935591519084169185156108fc02918691818181858888f19350505050158015610826573d6000803e3d6000fd5b50816001600160a01b0316816001600160a01b03167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb8560405161086c91815260200190565b60405180910390a3505050565b60006001600160e01b03198216630fae7cbb60e21b14806108aa57506001600160e01b03198216630704183b60e11b145b806108c557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60005a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a94597ff6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092757600080fd5b505afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f9190613610565b6109699190613e3a565b905090565b60008082356020840135141561098657506000610989565b50485b60006109a584356109a03a81602089013587613e3a565b612448565b90506109e16109d660646109d06109c060408901358361245e565b6109ca8a8761246a565b9061246a565b90612476565b60608601359061245e565b95945050505050565b610a366040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600060ff1681525090565b506040805160e0810182526001548152600254602082015260035491810191909152600454606082015260055460808201526006546001600160a01b03811660a0830152600160a01b900460ff1660c082015290565b6000546001600160a01b03163314610ab65760405162461bcd60e51b81526004016107b090613bb0565b610ac06000612482565b565b6000546001600160a01b03163314610aec5760405162461bcd60e51b81526004016107b090613bb0565b8051825114610b3d5760405162461bcd60e51b815260206004820152601e60248201527f7365744d696e696d756d5374616b65733a2077726f6e67206c656e677468000060448201526064016107b0565b60005b8251811015610c3657818181518110610b5b57610b5b613f1d565b602002602001015160076000858481518110610b7957610b79613f1d565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055507ffb7510fe755f485459ee8ed619d4a0addc092c230ff47e760a62aeba78ebb9e3838281518110610bd857610bd8613f1d565b6020026020010151838381518110610bf257610bf2613f1d565b6020026020010151604051610c1c9291906001600160a01b03929092168252602082015260400190565b60405180910390a180610c2e81613ed6565b915050610b40565b505050565b600654600090600160a01b900460ff16610c5757506000919050565b600654606490600160a01b900460ff1683020492915050565b60006060610cca604051806101200160405280600081526020016000815260200160008152602001600080191681526020016000151581526020016060815260200160608152602001606081526020016000151581525090565b610cd26108cb565b81525a610cdf9086613e93565b6020820152333014610d335760405162461bcd60e51b815260206004820152601a60248201527f4d7573742062652063616c6c65642062792052656c617948756200000000000060448201526064016107b0565b600a6000610d4460208e018e613d63565b610d559060e081019060c00161311b565b6001600160a01b03168152602081019190915260409081016000205482820152516386bf413f60e01b90610d97908d908d908d908d908d908b90602401613cb8565b60408051601f19818403018152919052602080820180516001600160e01b03166001600160e01b03199094169390931790925260e0830152600090606090610de1908e018e613d63565b610df29060e081019060c00161311b565b6001600160a01b031688602001358460e00151604051610e12919061394a565b60006040518083038160008787f1925050503d8060008114610e50576040519150601f19603f3d011682016040523d82523d6000602084013e610e55565b606091505b50909250905081610e7457610e69816124d2565b610e746002826124de565b80806020019051810190610e889190613335565b151561010085015260c08401525060009050610ea58c8c8c612517565b60a085015215156080840152905080610ec757610ec760038360a001516124de565b8161010001518015610edb57508160800151155b15610eef57610eef60048360a001516124de565b5063edb7bf1360e01b8160c001518260800151610f0a6108cb565b8451610f169190613e93565b8460200151610f259190613e3a565b8e8060200190610f359190613d63565b604051602401610f489493929190613b3f565b60408051601f19818403018152919052602080820180516001600160e01b03166001600160e01b03199094169390931790925260e08301526000908190610f91908e018e613d63565b610fa29060e081019060c00161311b565b6001600160a01b031688604001358460e00151604051610fc2919061394a565b60006040518083038160008787f1925050503d8060008114611000576040519150601f19603f3d011682016040523d82523d6000602084013e611005565b606091505b50915091508161101a5761101a6005826124de565b50506040810151600a600061103260208f018f613d63565b6110439060e081019060c00161311b565b6001600160a01b03166001600160a01b03168152602001908152602001600020541015611084576110846006604051806020016040528060008152506124de565b8060800151611094576001611097565b60005b8160a0015192509250509850989650505050505050565b6110c86001600160a01b03821663fce78fd160e01b6126fe565b6111145760405162461bcd60e51b815260206004820181905260248201527f746172676574206973206e6f7420612076616c696420495061796d617374657260448201526064016107b0565b6001600160a01b0381166000908152600a60205260409020543490611139908261245e565b6001600160a01b0383166000818152600a6020908152604091829020939093555183815233927f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7910160405180910390a35050565b6000546001600160a01b031633146111b85760405162461bcd60e51b81526004016107b090613bb0565b600b5442106111fe5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e4819195c1c9958d85d195960721b60448201526064016107b0565b600b8190556040518181527f1c0aa0c666483fbf0cf795d9d646ea3552d1e3008162ba9ab1d6d6dfd8c6ec6b906020015b60405180910390a150565b33600081815260096020526040812054611255908490613e3a565b6001600160a01b03831660009081526009602052604090208190556001549091508111156112b85760405162461bcd60e51b815260206004820152601060248201526f746f6f206d616e7920776f726b65727360801b60448201526064016107b0565b6112c182611e4a565b60005b838110156113d15760006008818787858181106112e3576112e3613f1d565b90506020020160208101906112f8919061311b565b6001600160a01b03908116825260208201929092526040016000205416146113625760405162461bcd60e51b815260206004820152601960248201527f7468697320776f726b6572206861732061206d616e616765720000000000000060448201526064016107b0565b826008600087878581811061137957611379613f1d565b905060200201602081019061138e919061311b565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b03191692909116919091179055806113c981613ed6565b9150506112c4565b50816001600160a01b03167febf4a9bffb39f7c5dbf3f65540183b9381ae226ac3d0a45b4cad484713bd4a2885858460405161140f93929190613ace565b60405180910390a250505050565b6000546001600160a01b031633146114475760405162461bcd60e51b81526004016107b090613bb0565b60648160c0015160ff16106114915760405162461bcd60e51b815260206004820152601060248201526f0c8caec40cccaca40e8dede40d0d2ced60831b60448201526064016107b0565b80516001819055602080830151600281905560408085015160038190556060808701516004819055608080890151600581905560a0808b01516006805460c0808f01516001600160a01b039485166001600160a81b031990931692909217600160a01b60ff9384160217928390558a519d8e529b8d019a909a52978b019690965293890192909252870152908216858201521c16908201527ffd0fe4fa2d954b682752f887632a7d7edc955bc7691dba63ff3fa867cf7895f59060e00161122f565b6000606061155f612f22565b6115676108cb565b604082015261157788888861271a565b610180820152600b5442106115bf5760405162461bcd60e51b815260206004820152600e60248201526d1a1d588819195c1c9958d85d195960921b60448201526064016107b0565b60046115cb8980613d4d565b6115d99060a0810190613d07565b905010156115e857600061163d565b61163d6115f58980613d4d565b6116039060a0810190613d07565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250612776915050565b6001600160e01b0319166020820152336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461178b57856116c95760405162461bcd60e51b815260206004820181905260248201527f6d697373696e67207369676e6174757265206f7220626164206761746577617960448201526064016107b0565b3332146117185760405162461bcd60e51b815260206004820152601860248201527f72656c617920776f726b6572206d75737420626520454f41000000000000000060448201526064016107b0565b6117256020890189613d63565b6117369060c081019060a00161311b565b6001600160a01b0316336001600160a01b03161461178b5760405162461bcd60e51b81526020600482015260126024820152712737ba1030903934b3b43a103bb7b935b2b960711b60448201526064016107b0565b6008600061179c60208b018b613d63565b6117ad9060c081019060a00161311b565b6001600160a01b0390811682526020820192909252604001600020541661016082018190526118155760405162461bcd60e51b81526020600482015260146024820152732ab735b737bbb7103932b630bc903bb7b935b2b960611b60448201526064016107b0565b611823816101600151611e4a565b611832898983604001516127e6565b61010083015260a082015261184a8888888888612a70565b60025460009060405a61185e90603f613e74565b6118689190613e52565b6118729190613e93565b905061187c6108cb565b6101208301526003546004546040840151600092919084906118a160208f018f613d63565b608001356118af9190613e3a565b6118b99190613e3a565b6118c39190613e3a565b6118cd9190613e3a565b9050600080306001600160a01b031684639b199b8660e01b8e8e8e8e8e8c60a001516118f76108cb565b611901908d613e93565b8e610100015160405160240161191e989796959493929190613c38565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161195c919061394a565b60006040518083038160008787f1925050503d806000811461199a576040519150601f19603f3d011682016040523d82523d6000602084013e61199f565b606091505b50811515875290925090506119b26108cb565b8561012001516119c29190613e93565b60e086015280516119dc9082016020908101908301613382565b8660c001876080018290528260068111156119f9576119f9613f07565b6006811115611a0a57611a0a613f07565b9052505060808501515115611a5b577fa1478a4242848419db824250a0dddc645dca0d6a9b12ab1fd79b00145a0ba98e8560c001518660800151604051611a52929190613b7d565b60405180910390a15b505050508060000151611bbb5760028160c001516006811115611a8057611a80613f07565b1480611aee5750611aa7611a9760208a018a613d63565b60a083015151906080013561245e565b8160e0015111158015611aee575060038160c001516006811115611acd57611acd613f07565b1480611aee575060048160c001516006811115611aec57611aec613f07565b145b15611bbb5761018081015160009350611b0a60208a018a613d63565b611b1b9060e081019060c00161311b565b6101608301516001600160a01b0391821691167f0c47510cb900901afca7c9e926892582a36fd3bb7f908142ccf0fb4382a2b684611b598c80613d4d565b611b6790602081019061311b565b611b718d80613d4d565b611b8290604081019060200161311b565b3387602001518860e001518960800151604051611ba496959493929190613a4f565b60405180910390a460800151600092509050611e1f565b600454600090611bc96108cb565b8360400151611bd89190613e93565b611be560208c018c613d63565b60800135611bf39190613e3a565b611bfd9190613e3a565b90506000611c128261034860208d018d613d63565b90506000611c1f82610c3b565b9050611c6a82600a60008e8060200190611c399190613d63565b611c4a9060e081019060c00161311b565b6001600160a01b0316815260208101919091526040016000205490612435565b600a6000611c7b60208f018f613d63565b611c8c9060e081019060c00161311b565b6001600160a01b03168152602081019190915260400160002055611cd7611cb38383612435565b6101608601516001600160a01b03166000908152600a60205260409020549061245e565b6101608501516001600160a01b03166000908152600a60205260409020558015611d3c576006546001600160a01b03166000908152600a6020526040902054611d20908261245e565b6006546001600160a01b03166000908152600a60205260409020555b6000611d488c80613d4d565b611d5690602081019061311b565b90506000611d648d80613d4d565b611d7590604081019060200161311b565b90506000611d8660208f018f613d63565b611d979060e081019060c00161311b565b9050866101800151336001600160a01b03168861016001516001600160a01b03167fd51ac07012398c2059ec53c6005fa8639657917bd2dbd72bc489a3c0eaaa7f168686868d602001518e60c001518d604051611df996959493929190613a01565b60405180910390a450505060016040518060200160405280600081525095509550505050505b965096945050505050565b606060405180606001604052806026815260200161408260269139905090565b60405163c345315360e01b81526001600160a01b03828116600483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063c34531539060240160c06040518083038186803b158015611eb057600080fd5b505afa158015611ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee89190613561565b6060820180516001600160a01b0390811660009081526007602052604090205491519395509193509116611f595760405162461bcd60e51b81526020600482015260186024820152771c995b185e481b585b9859d95c881b9bdd081cdd185ad95960421b60448201526064016107b0565b8251811115611faa5760405162461bcd60e51b815260206004820152601960248201527f7374616b6520616d6f756e7420697320746f6f20736d616c6c0000000000000060448201526064016107b0565b80611ff75760405162461bcd60e51b815260206004820152601f60248201527f7374616b696e67207468697320746f6b656e20697320666f7262696464656e0060448201526064016107b0565b6005546020840151101561204d5760405162461bcd60e51b815260206004820152601a60248201527f756e7374616b652064656c617920697320746f6f20736d616c6c00000000000060448201526064016107b0565b60408301511561209f5760405162461bcd60e51b815260206004820152601860248201527f7374616b6520686173206265656e2077697468647261776e000000000000000060448201526064016107b0565b816120ec5760405162461bcd60e51b815260206004820181905260248201527f7468697320687562206973206e6f7420617574686f72697a656420627920534d60448201526064016107b0565b50505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461215a5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103832b730b634bd32b960991b60448201526064016107b0565b6001600160a01b0380831660009081526008602052604090205416806121b95760405162461bcd60e51b81526020600482015260146024820152732ab735b737bbb7103932b630bc903bb7b935b2b960611b60448201526064016107b0565b60405163c345315360e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063c34531539060240160c06040518083038186803b15801561221f57600080fd5b505afa158015612233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122579190613561565b5080519091506122a45760405162461bcd60e51b81526020600482015260186024820152771c995b185e481b585b9859d95c881b9bdd081cdd185ad95960421b60448201526064016107b0565b805160405163026822bd60e21b81526001600160a01b038481166004830152858116602483015260448201929092527f0000000000000000000000000000000000000000000000000000000000000000909116906309a08af490606401600060405180830381600087803b15801561231b57600080fd5b505af115801561232f573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146123635760405162461bcd60e51b81526004016107b090613bb0565b6001600160a01b0381166123c85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107b0565b6123d181612482565b50565b6123dd81611e4a565b6001600160a01b0381166000908152600960205260409020546123d15760405162461bcd60e51b815260206004820152601060248201526f6e6f2072656c617920776f726b65727360801b60448201526064016107b0565b60006124418284613e93565b9392505050565b60008183106124575781612441565b5090919050565b60006124418284613e3a565b60006124418284613e74565b60006124418284613e52565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6123d181610400612b90565b600082826040516020016124f3929190613b7d565b604051602081830303815290604052905061250d816124d2565b8051602082018181fd5b6000806060600061252787612ba1565b9050600061255261253b60208a018a613d63565b61254d9061010081019060e00161311b565b612be0565b90506125616020890189613d63565b6125739061010081019060e00161311b565b6001600160a01b031663e024dc7f60e01b61258e8a80613d4d565b836040518060400160405280600c81526020016b14995b185e54995c5d595cdd60a21b8152506040518060a0016040528060618152602001613f5f6061913960405180610100016040528060c28152602001613fc060c291396040516020016125f791906139c5565b60408051601f1981840301815290829052612616939291602001613966565b60405160208183030381529060405280519060200120868c8c60405160240161264496959493929190613be5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612682919061394a565b6000604051808303816000865af19150503d80600081146126bf576040519150601f19603f3d011682016040523d82523d6000602084013e6126c4565b606091505b50909550925084156126ea57828060200190518101906126e491906132c8565b90945092505b6126f3836124d2565b505093509350939050565b600061270983612c59565b801561244157506124418383612c8c565b60006127268480613d4d565b61273490602081019061311b565b61273e8580613d4d565b6080013584846040516020016127579493929190613aa6565b6040516020818303038152906040528051906020012090509392505050565b6000612783826004613e3a565b835110156127d35760405162461bcd60e51b815260206004820152601a60248201527f726561644279746573343a206461746120746f6f2073686f727400000000000060448201526064016107b0565b5001602001516001600160e01b03191690565b6128116040518060800160405280600081526020016000815260200160008152602001600081525090565b60006128206020850185613d63565b6128319060e081019060c00161311b565b6001600160a01b031663b039a88f61c3506040518263ffffffff1660e01b815260040160806040518083038187803b15801561286c57600080fd5b5086fa158015612880573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906128a591906133c0565b60608101519092503611156128fc5760405162461bcd60e51b815260206004820152601760248201527f6d73672e64617461206578636565646564206c696d697400000000000000000060448201526064016107b0565b815185101561294d5760405162461bcd60e51b815260206004820152601a60248201527f616363657074616e63652062756467657420746f6f206869676800000000000060448201526064016107b0565b6020820151825110156129a25760405162461bcd60e51b815260206004820152601960248201527f616363657074616e63652062756467657420746f6f206c6f770000000000000060448201526064016107b0565b826129b06020860186613d63565b608001356129be9190613e3a565b905060006129d3826103486020880188613d63565b9050600a60006129e66020880188613d63565b6129f79060e081019060c00161311b565b6001600160a01b03166001600160a01b0316815260200190815260200160002054811115612a675760405162461bcd60e51b815260206004820152601960248201527f5061796d61737465722062616c616e636520746f6f206c6f770000000000000060448201526064016107b0565b50935093915050565b6000612a96612a826020880188613d63565b612a9190610100810190613d07565b612d75565b612ab1612aa38880613d4d565b612a919060a0810190613d07565b612abb8585612d75565b612ac58888612d75565b612ad1906102e4613e3a565b612adb9190613e3a565b612ae59190613e3a565b612aef9190613e3a565b90506041841115612b425760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e677468000000000000000060448201526064016107b0565b368114612b885760405162461bcd60e51b81526020600482015260146024820152736578747261206d73672e6461746120627974657360601b60448201526064016107b0565b505050505050565b8082511115612b9d578082525b5050565b6060612bb8612bb36020840184613d63565b612d9b565b604051602001612bca91815260200190565b6040516020818303038152906040529050919050565b6040805160c0810182526017608082019081527f47534e2052656c61796564205472616e73616374696f6e00000000000000000060a083015281528151808301835260018152601960f91b6020808301919091528201526000916108c591908101468152602001846001600160a01b0316815250612ea2565b6000612c6c826301ffc9a760e01b612c8c565b80156108c55750612c85826001600160e01b0319612c8c565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090612cf390869061394a565b6000604051808303818686fa925050503d8060008114612d2f576040519150601f19603f3d011682016040523d82523d6000602084013e612d34565b606091505b5091509150602081511015612d4f57600093505050506108c5565b818015612d6b575080806020019051810190612d6b91906132ad565b9695505050505050565b6000612d84601f600019613e93565b612d8f83601f613e3a565b61244191166020613e3a565b600060405180610100016040528060c28152602001613fc060c2913980516020918201209083359084013560408501356060860135612de060c0880160a0890161311b565b612df060e0890160c08a0161311b565b612e016101008a0160e08b0161311b565b612e0f6101008b018b613d07565b604051612e1d92919061393a565b60408051918290038220602083019a909a528101979097526060870195909552608086019390935260a08501919091526001600160a01b0390811660c085015290811660e0840152166101008201526101208082019290925290830135610140820152610160015b604051602081830303815290604052805190602001209050919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82600001518051906020012083602001518051906020012084604001518560600151604051602001612e859594939291909485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b604051806101a0016040528060001515815260200160006001600160e01b0319168152602001600081526020016060815260200160608152602001612f886040518060800160405280600081526020016000815260200160008152602001600081525090565b815260200160008152600060208201819052604082018190526060808301829052608083015260a0820181905260c09091015290565b8035612fc981613f49565b919050565b600082601f830112612fdf57600080fd5b81356020612ff4612fef83613dd2565b613da2565b80838252828201915082860187848660051b890101111561301457600080fd5b60005b8581101561303357813584529284019290840190600101613017565b5090979650505050505050565b80518015158114612fc957600080fd5b60008083601f84011261306257600080fd5b5081356001600160401b0381111561307957600080fd5b60208301915083602082850101111561309157600080fd5b9250929050565b600082601f8301126130a957600080fd5b81516001600160401b038111156130c2576130c2613f33565b6130d5601f8201601f1916602001613da2565b8181528460208386010111156130ea57600080fd5b6130fb826020830160208701613eaa565b949350505050565b60006040828403121561311557600080fd5b50919050565b60006020828403121561312d57600080fd5b813561244181613f49565b6000806040838503121561314b57600080fd5b823561315681613f49565b9150602083013561316681613f49565b809150509250929050565b6000806020838503121561318457600080fd5b82356001600160401b038082111561319b57600080fd5b818501915085601f8301126131af57600080fd5b8135818111156131be57600080fd5b8660208260051b85010111156131d357600080fd5b60209290920196919550909350505050565b600080604083850312156131f857600080fd5b82356001600160401b038082111561320f57600080fd5b818501915085601f83011261322357600080fd5b81356020613233612fef83613dd2565b8083825282820191508286018a848660051b890101111561325357600080fd5b600096505b8487101561327f57803561326b81613f49565b835260019690960195918301918301613258565b509650508601359250508082111561329657600080fd5b506132a385828601612fce565b9150509250929050565b6000602082840312156132bf57600080fd5b61244182613040565b600080604083850312156132db57600080fd5b6132e483613040565b915060208301516001600160401b038111156132ff57600080fd5b6132a385828601613098565b60006020828403121561331d57600080fd5b81356001600160e01b03198116811461244157600080fd5b6000806040838503121561334857600080fd5b82516001600160401b0381111561335e57600080fd5b61336a85828601613098565b92505061337960208401613040565b90509250929050565b6000806040838503121561339557600080fd5b8251600781106133a457600080fd5b60208401519092506001600160401b038111156132ff57600080fd5b6000608082840312156133d257600080fd5b604051608081018181106001600160401b03821117156133f4576133f4613f33565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b600060e0828403121561343757600080fd5b61343f613d7a565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013561347981613f49565b60a082015260c083013560ff8116811461349257600080fd5b60c08201529392505050565b600080600080600080600080888a036101208112156134bc57600080fd5b89356001600160401b03808211156134d357600080fd5b6134df8d838e01613103565b9a5060208c01359150808211156134f557600080fd5b6135018d838e01613050565b909a50985060408c013591508082111561351a57600080fd5b506135278c828d01613050565b9097509550506080605f198201121561353f57600080fd5b5096999598509396929550909360608301935060e08301359261010001359150565b60008082840360c081121561357557600080fd5b60a081121561358357600080fd5b5060405160a081018181106001600160401b03821117156135a6576135a6613f33565b806040525083518152602084015160208201526040840151604082015260608401516135d181613f49565b606082015260808401516135e481613f49565b6080820152915061337960a08401613040565b60006020828403121561360957600080fd5b5035919050565b60006020828403121561362257600080fd5b5051919050565b6000806040838503121561363c57600080fd5b82359150602083013561316681613f49565b6000806040838503121561366157600080fd5b8235915060208301356001600160401b0381111561367e57600080fd5b8301610140818603121561316657600080fd5b600080600080600080608087890312156136aa57600080fd5b8635955060208701356001600160401b03808211156136c857600080fd5b6136d48a838b01613103565b965060408901359150808211156136ea57600080fd5b6136f68a838b01613050565b9096509450606089013591508082111561370f57600080fd5b5061371c89828a01613050565b979a9699509497509295939492505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815180845261376f816020860160208601613eaa565b601f01601f19169290920160200192915050565b600781106137a157634e487b7160e01b600052602160045260246000fd5b9052565b600081356137b281613f49565b6001600160a01b0390811684526020830135906137ce82613f49565b1660208401526040828101359084015260608083013590840152608080830135908401526137ff60a0830183613df5565b60e060a086015261381460e08601828461372e565b91505060c083013560c08501528091505092915050565b6000610140823584526020830135602085015260408301356040850152606083013560608501526080830135608085015261386860a08401612fbe565b6001600160a01b031660a085015261388260c08401612fbe565b6001600160a01b031660c085015261389c60e08401612fbe565b6001600160a01b031660e08501526101006138b984820185613df5565b83838801526138cb848801828461372e565b6101209687013597909601969096525092949350505050565b6000813582360360de19810182126138fb57600080fd5b6040855261390e604086018584016137a5565b9150602084013561013e198201811261392657600080fd5b8583036020870152612d6b8386830161382b565b8183823760009101908152919050565b6000825161395c818460208701613eaa565b9190910192915050565b60008451613978818460208901613eaa565b600560fb1b9083019081528451613996816001840160208901613eaa565b600b60fa1b6001929091019182015283516139b8816002840160208801613eaa565b0160020195945050505050565b7352656c6179446174612072656c6179446174612960601b8152600082516139f4816014850160208701613eaa565b9190910160140192915050565b6001600160a01b0387811682528681166020830152851660408201526001600160e01b03198416606082015260c08101613a3e6080830185613783565b8260a0830152979650505050505050565b6001600160a01b0387811682528681166020830152851660408201526001600160e01b0319841660608201526080810183905260c060a08201819052600090613a9a90830184613757565b98975050505050505050565b60018060a01b0385168152836020820152606060408201526000612d6b60608301848661372e565b6040808252810183905260008460608301825b86811015613b11578235613af481613f49565b6001600160a01b0316825260209283019290910190600101613ae1565b5060209390930193909352509392505050565b82151581526040602082015260006130fb6040830184613757565b608081526000613b526080830187613757565b85151560208401528460408401528281036060840152613b72818561382b565b979650505050505050565b613b878184613783565b6040602082015260006130fb6040830184613757565b6020815260006124416020830184613757565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60a081526000613bf860a08301896137a5565b8760208401528660408401528281036060840152613c168187613757565b90508281036080840152613c2b81858761372e565b9998505050505050505050565b6000610120808352613c4c8184018c6138e4565b90508281036020840152613c61818a8c61372e565b90508281036040840152613c7681888a61372e565b9150508451606083015260208501516080830152604085015160a0830152606085015160c08301528360e0830152826101008301529998505050505050505050565b608081526000613ccb60808301896138e4565b8281036020840152613cde81888a61372e565b90508281036040840152613cf381868861372e565b915050826060830152979650505050505050565b6000808335601e19843603018112613d1e57600080fd5b8301803591506001600160401b03821115613d3857600080fd5b60200191503681900382131561309157600080fd5b6000823560de1983360301811261395c57600080fd5b6000823561013e1983360301811261395c57600080fd5b60405160e081016001600160401b0381118282101715613d9c57613d9c613f33565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613dca57613dca613f33565b604052919050565b60006001600160401b03821115613deb57613deb613f33565b5060051b60200190565b6000808335601e19843603018112613e0c57600080fd5b83016020810192503590506001600160401b03811115613e2b57600080fd5b80360383131561309157600080fd5b60008219821115613e4d57613e4d613ef1565b500190565b600082613e6f57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613e8e57613e8e613ef1565b500290565b600082821015613ea557613ea5613ef1565b500390565b60005b83811015613ec5578181015183820152602001613ead565b838111156120ec5750506000910152565b6000600019821415613eea57613eea613ef1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146123d157600080fdfe616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c54696d6552656c6179446174612875696e74323536206d61784665655065724761732c75696e74323536206d61785072696f726974794665655065724761732c75696e743235362070637452656c61794665652c75696e74323536206261736552656c61794665652c616464726573732072656c6179576f726b65722c61646472657373207061796d61737465722c6164647265737320666f727761726465722c6279746573207061796d6173746572446174612c75696e7432353620636c69656e74496429332e302e302d616c7068612e332b6f70656e67736e2e6172626875622e6972656c6179687562a2646970667358221220b45e54d125877b9840aee76a5bb1a52a558569746f05770dcb764e308c7d943964736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101ed5760003560e01c8063a51c8cb91161010d578063ca76fe78116100a0578063e6e22e121161006f578063e6e22e12146106ad578063ebcd31ac146106cd578063f2fde38b146106ed578063f7908a741461070d578063f8ba1e981461074057600080fd5b8063ca76fe7814610607578063d17da3e814610627578063d904c73214610655578063ddf737891461067757600080fd5b8063c2da0786116100dc578063c2da078614610569578063c5c98a1a14610589578063c7178230146105bc578063ca64f9e7146105d457600080fd5b8063a51c8cb9146104c9578063aa67c919146104fd578063af595dfc14610510578063be7c76ad1461053057600080fd5b80636bd50cef116101855780638a09fb56116101545780638a09fb561461043d5780638ac3b8451461045d5780638da5cb5b1461047d5780639b199b861461049b57600080fd5b80636bd50cef1461034d57806370a08231146103bf578063715018a6146103f557806375dc7b4e1461040a57600080fd5b806345bdade7116101c157806345bdade71461029b57806351d85156146102b057806359c4afc0146102f757806368738b471461032d57600080fd5b8062f714ce146101f257806301ffc9a71461021457806320ffd56d146102495780633c16e59a14610286575b600080fd5b3480156101fe57600080fd5b5061021261020d366004613629565b610760565b005b34801561022057600080fd5b5061023461022f36600461330b565b610879565b60405190151581526020015b60405180910390f35b34801561025557600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b604051908152602001610240565b34801561029257600080fd5b50600b54610278565b3480156102a757600080fd5b506102786108cb565b3480156102bc57600080fd5b507f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b039091168152602001610240565b34801561030357600080fd5b5061027861031236600461311b565b6001600160a01b031660009081526009602052604090205490565b34801561033957600080fd5b5061027861034836600461364e565b61096e565b34801561035957600080fd5b506103626109ea565b6040516102409190815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301516001600160a01b03169082015260c09182015160ff169181019190915260e00190565b3480156103cb57600080fd5b506102786103da36600461311b565b6001600160a01b03166000908152600a602052604090205490565b34801561040157600080fd5b50610212610a8c565b34801561041657600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102df565b34801561044957600080fd5b506102126104583660046131e5565b610ac2565b34801561046957600080fd5b506102786104783660046135f7565b610c3b565b34801561048957600080fd5b506000546001600160a01b03166102df565b3480156104a757600080fd5b506104bb6104b636600461349e565b610c70565b604051610240929190613b7d565b3480156104d557600080fd5b506102df7f000000000000000000000000000000000000000000000000000000000000000081565b61021261050b36600461311b565b6110ae565b34801561051c57600080fd5b5061021261052b3660046135f7565b61118e565b34801561053c57600080fd5b506102df61054b36600461311b565b6001600160a01b039081166000908152600860205260409020541690565b34801561057557600080fd5b50610212610584366004613171565b61123a565b34801561059557600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610278565b3480156105c857600080fd5b50600b54421015610234565b3480156105e057600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102df565b34801561061357600080fd5b50610212610622366004613425565b61141d565b34801561063357600080fd5b50610647610642366004613691565b611553565b604051610240929190613b24565b34801561066157600080fd5b5061066a611e2a565b6040516102409190613b9d565b34801561068357600080fd5b5061027861069236600461311b565b6001600160a01b031660009081526007602052604090205490565b3480156106b957600080fd5b506102126106c836600461311b565b611e4a565b3480156106d957600080fd5b506102126106e8366004613138565b6120f2565b3480156106f957600080fd5b5061021261070836600461311b565b612339565b34801561071957600080fd5b507f00000000000000000000000000000000000000000000000000000000000000006102df565b34801561074c57600080fd5b5061021261075b36600461311b565b6123d4565b336000818152600a60205260409020548311156107b95760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b60448201526064015b60405180910390fd5b6001600160a01b0381166000908152600a60205260409020546107dc9084612435565b6001600160a01b038083166000908152600a60205260408082209390935591519084169185156108fc02918691818181858888f19350505050158015610826573d6000803e3d6000fd5b50816001600160a01b0316816001600160a01b03167fd1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb8560405161086c91815260200190565b60405180910390a3505050565b60006001600160e01b03198216630fae7cbb60e21b14806108aa57506001600160e01b03198216630704183b60e11b145b806108c557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60005a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a94597ff6040518163ffffffff1660e01b815260040160206040518083038186803b15801561092757600080fd5b505afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f9190613610565b6109699190613e3a565b905090565b60008082356020840135141561098657506000610989565b50485b60006109a584356109a03a81602089013587613e3a565b612448565b90506109e16109d660646109d06109c060408901358361245e565b6109ca8a8761246a565b9061246a565b90612476565b60608601359061245e565b95945050505050565b610a366040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600060ff1681525090565b506040805160e0810182526001548152600254602082015260035491810191909152600454606082015260055460808201526006546001600160a01b03811660a0830152600160a01b900460ff1660c082015290565b6000546001600160a01b03163314610ab65760405162461bcd60e51b81526004016107b090613bb0565b610ac06000612482565b565b6000546001600160a01b03163314610aec5760405162461bcd60e51b81526004016107b090613bb0565b8051825114610b3d5760405162461bcd60e51b815260206004820152601e60248201527f7365744d696e696d756d5374616b65733a2077726f6e67206c656e677468000060448201526064016107b0565b60005b8251811015610c3657818181518110610b5b57610b5b613f1d565b602002602001015160076000858481518110610b7957610b79613f1d565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055507ffb7510fe755f485459ee8ed619d4a0addc092c230ff47e760a62aeba78ebb9e3838281518110610bd857610bd8613f1d565b6020026020010151838381518110610bf257610bf2613f1d565b6020026020010151604051610c1c9291906001600160a01b03929092168252602082015260400190565b60405180910390a180610c2e81613ed6565b915050610b40565b505050565b600654600090600160a01b900460ff16610c5757506000919050565b600654606490600160a01b900460ff1683020492915050565b60006060610cca604051806101200160405280600081526020016000815260200160008152602001600080191681526020016000151581526020016060815260200160608152602001606081526020016000151581525090565b610cd26108cb565b81525a610cdf9086613e93565b6020820152333014610d335760405162461bcd60e51b815260206004820152601a60248201527f4d7573742062652063616c6c65642062792052656c617948756200000000000060448201526064016107b0565b600a6000610d4460208e018e613d63565b610d559060e081019060c00161311b565b6001600160a01b03168152602081019190915260409081016000205482820152516386bf413f60e01b90610d97908d908d908d908d908d908b90602401613cb8565b60408051601f19818403018152919052602080820180516001600160e01b03166001600160e01b03199094169390931790925260e0830152600090606090610de1908e018e613d63565b610df29060e081019060c00161311b565b6001600160a01b031688602001358460e00151604051610e12919061394a565b60006040518083038160008787f1925050503d8060008114610e50576040519150601f19603f3d011682016040523d82523d6000602084013e610e55565b606091505b50909250905081610e7457610e69816124d2565b610e746002826124de565b80806020019051810190610e889190613335565b151561010085015260c08401525060009050610ea58c8c8c612517565b60a085015215156080840152905080610ec757610ec760038360a001516124de565b8161010001518015610edb57508160800151155b15610eef57610eef60048360a001516124de565b5063edb7bf1360e01b8160c001518260800151610f0a6108cb565b8451610f169190613e93565b8460200151610f259190613e3a565b8e8060200190610f359190613d63565b604051602401610f489493929190613b3f565b60408051601f19818403018152919052602080820180516001600160e01b03166001600160e01b03199094169390931790925260e08301526000908190610f91908e018e613d63565b610fa29060e081019060c00161311b565b6001600160a01b031688604001358460e00151604051610fc2919061394a565b60006040518083038160008787f1925050503d8060008114611000576040519150601f19603f3d011682016040523d82523d6000602084013e611005565b606091505b50915091508161101a5761101a6005826124de565b50506040810151600a600061103260208f018f613d63565b6110439060e081019060c00161311b565b6001600160a01b03166001600160a01b03168152602001908152602001600020541015611084576110846006604051806020016040528060008152506124de565b8060800151611094576001611097565b60005b8160a0015192509250509850989650505050505050565b6110c86001600160a01b03821663fce78fd160e01b6126fe565b6111145760405162461bcd60e51b815260206004820181905260248201527f746172676574206973206e6f7420612076616c696420495061796d617374657260448201526064016107b0565b6001600160a01b0381166000908152600a60205260409020543490611139908261245e565b6001600160a01b0383166000818152600a6020908152604091829020939093555183815233927f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a7910160405180910390a35050565b6000546001600160a01b031633146111b85760405162461bcd60e51b81526004016107b090613bb0565b600b5442106111fe5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e4819195c1c9958d85d195960721b60448201526064016107b0565b600b8190556040518181527f1c0aa0c666483fbf0cf795d9d646ea3552d1e3008162ba9ab1d6d6dfd8c6ec6b906020015b60405180910390a150565b33600081815260096020526040812054611255908490613e3a565b6001600160a01b03831660009081526009602052604090208190556001549091508111156112b85760405162461bcd60e51b815260206004820152601060248201526f746f6f206d616e7920776f726b65727360801b60448201526064016107b0565b6112c182611e4a565b60005b838110156113d15760006008818787858181106112e3576112e3613f1d565b90506020020160208101906112f8919061311b565b6001600160a01b03908116825260208201929092526040016000205416146113625760405162461bcd60e51b815260206004820152601960248201527f7468697320776f726b6572206861732061206d616e616765720000000000000060448201526064016107b0565b826008600087878581811061137957611379613f1d565b905060200201602081019061138e919061311b565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b03191692909116919091179055806113c981613ed6565b9150506112c4565b50816001600160a01b03167febf4a9bffb39f7c5dbf3f65540183b9381ae226ac3d0a45b4cad484713bd4a2885858460405161140f93929190613ace565b60405180910390a250505050565b6000546001600160a01b031633146114475760405162461bcd60e51b81526004016107b090613bb0565b60648160c0015160ff16106114915760405162461bcd60e51b815260206004820152601060248201526f0c8caec40cccaca40e8dede40d0d2ced60831b60448201526064016107b0565b80516001819055602080830151600281905560408085015160038190556060808701516004819055608080890151600581905560a0808b01516006805460c0808f01516001600160a01b039485166001600160a81b031990931692909217600160a01b60ff9384160217928390558a519d8e529b8d019a909a52978b019690965293890192909252870152908216858201521c16908201527ffd0fe4fa2d954b682752f887632a7d7edc955bc7691dba63ff3fa867cf7895f59060e00161122f565b6000606061155f612f22565b6115676108cb565b604082015261157788888861271a565b610180820152600b5442106115bf5760405162461bcd60e51b815260206004820152600e60248201526d1a1d588819195c1c9958d85d195960921b60448201526064016107b0565b60046115cb8980613d4d565b6115d99060a0810190613d07565b905010156115e857600061163d565b61163d6115f58980613d4d565b6116039060a0810190613d07565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250612776915050565b6001600160e01b0319166020820152336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461178b57856116c95760405162461bcd60e51b815260206004820181905260248201527f6d697373696e67207369676e6174757265206f7220626164206761746577617960448201526064016107b0565b3332146117185760405162461bcd60e51b815260206004820152601860248201527f72656c617920776f726b6572206d75737420626520454f41000000000000000060448201526064016107b0565b6117256020890189613d63565b6117369060c081019060a00161311b565b6001600160a01b0316336001600160a01b03161461178b5760405162461bcd60e51b81526020600482015260126024820152712737ba1030903934b3b43a103bb7b935b2b960711b60448201526064016107b0565b6008600061179c60208b018b613d63565b6117ad9060c081019060a00161311b565b6001600160a01b0390811682526020820192909252604001600020541661016082018190526118155760405162461bcd60e51b81526020600482015260146024820152732ab735b737bbb7103932b630bc903bb7b935b2b960611b60448201526064016107b0565b611823816101600151611e4a565b611832898983604001516127e6565b61010083015260a082015261184a8888888888612a70565b60025460009060405a61185e90603f613e74565b6118689190613e52565b6118729190613e93565b905061187c6108cb565b6101208301526003546004546040840151600092919084906118a160208f018f613d63565b608001356118af9190613e3a565b6118b99190613e3a565b6118c39190613e3a565b6118cd9190613e3a565b9050600080306001600160a01b031684639b199b8660e01b8e8e8e8e8e8c60a001516118f76108cb565b611901908d613e93565b8e610100015160405160240161191e989796959493929190613c38565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b031990941693909317909252905161195c919061394a565b60006040518083038160008787f1925050503d806000811461199a576040519150601f19603f3d011682016040523d82523d6000602084013e61199f565b606091505b50811515875290925090506119b26108cb565b8561012001516119c29190613e93565b60e086015280516119dc9082016020908101908301613382565b8660c001876080018290528260068111156119f9576119f9613f07565b6006811115611a0a57611a0a613f07565b9052505060808501515115611a5b577fa1478a4242848419db824250a0dddc645dca0d6a9b12ab1fd79b00145a0ba98e8560c001518660800151604051611a52929190613b7d565b60405180910390a15b505050508060000151611bbb5760028160c001516006811115611a8057611a80613f07565b1480611aee5750611aa7611a9760208a018a613d63565b60a083015151906080013561245e565b8160e0015111158015611aee575060038160c001516006811115611acd57611acd613f07565b1480611aee575060048160c001516006811115611aec57611aec613f07565b145b15611bbb5761018081015160009350611b0a60208a018a613d63565b611b1b9060e081019060c00161311b565b6101608301516001600160a01b0391821691167f0c47510cb900901afca7c9e926892582a36fd3bb7f908142ccf0fb4382a2b684611b598c80613d4d565b611b6790602081019061311b565b611b718d80613d4d565b611b8290604081019060200161311b565b3387602001518860e001518960800151604051611ba496959493929190613a4f565b60405180910390a460800151600092509050611e1f565b600454600090611bc96108cb565b8360400151611bd89190613e93565b611be560208c018c613d63565b60800135611bf39190613e3a565b611bfd9190613e3a565b90506000611c128261034860208d018d613d63565b90506000611c1f82610c3b565b9050611c6a82600a60008e8060200190611c399190613d63565b611c4a9060e081019060c00161311b565b6001600160a01b0316815260208101919091526040016000205490612435565b600a6000611c7b60208f018f613d63565b611c8c9060e081019060c00161311b565b6001600160a01b03168152602081019190915260400160002055611cd7611cb38383612435565b6101608601516001600160a01b03166000908152600a60205260409020549061245e565b6101608501516001600160a01b03166000908152600a60205260409020558015611d3c576006546001600160a01b03166000908152600a6020526040902054611d20908261245e565b6006546001600160a01b03166000908152600a60205260409020555b6000611d488c80613d4d565b611d5690602081019061311b565b90506000611d648d80613d4d565b611d7590604081019060200161311b565b90506000611d8660208f018f613d63565b611d979060e081019060c00161311b565b9050866101800151336001600160a01b03168861016001516001600160a01b03167fd51ac07012398c2059ec53c6005fa8639657917bd2dbd72bc489a3c0eaaa7f168686868d602001518e60c001518d604051611df996959493929190613a01565b60405180910390a450505060016040518060200160405280600081525095509550505050505b965096945050505050565b606060405180606001604052806026815260200161408260269139905090565b60405163c345315360e01b81526001600160a01b03828116600483015260009182917f0000000000000000000000000000000000000000000000000000000000000000169063c34531539060240160c06040518083038186803b158015611eb057600080fd5b505afa158015611ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee89190613561565b6060820180516001600160a01b0390811660009081526007602052604090205491519395509193509116611f595760405162461bcd60e51b81526020600482015260186024820152771c995b185e481b585b9859d95c881b9bdd081cdd185ad95960421b60448201526064016107b0565b8251811115611faa5760405162461bcd60e51b815260206004820152601960248201527f7374616b6520616d6f756e7420697320746f6f20736d616c6c0000000000000060448201526064016107b0565b80611ff75760405162461bcd60e51b815260206004820152601f60248201527f7374616b696e67207468697320746f6b656e20697320666f7262696464656e0060448201526064016107b0565b6005546020840151101561204d5760405162461bcd60e51b815260206004820152601a60248201527f756e7374616b652064656c617920697320746f6f20736d616c6c00000000000060448201526064016107b0565b60408301511561209f5760405162461bcd60e51b815260206004820152601860248201527f7374616b6520686173206265656e2077697468647261776e000000000000000060448201526064016107b0565b816120ec5760405162461bcd60e51b815260206004820181905260248201527f7468697320687562206973206e6f7420617574686f72697a656420627920534d60448201526064016107b0565b50505050565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461215a5760405162461bcd60e51b815260206004820152600d60248201526c2737ba103832b730b634bd32b960991b60448201526064016107b0565b6001600160a01b0380831660009081526008602052604090205416806121b95760405162461bcd60e51b81526020600482015260146024820152732ab735b737bbb7103932b630bc903bb7b935b2b960611b60448201526064016107b0565b60405163c345315360e01b81526001600160a01b0382811660048301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063c34531539060240160c06040518083038186803b15801561221f57600080fd5b505afa158015612233573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122579190613561565b5080519091506122a45760405162461bcd60e51b81526020600482015260186024820152771c995b185e481b585b9859d95c881b9bdd081cdd185ad95960421b60448201526064016107b0565b805160405163026822bd60e21b81526001600160a01b038481166004830152858116602483015260448201929092527f0000000000000000000000000000000000000000000000000000000000000000909116906309a08af490606401600060405180830381600087803b15801561231b57600080fd5b505af115801561232f573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146123635760405162461bcd60e51b81526004016107b090613bb0565b6001600160a01b0381166123c85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107b0565b6123d181612482565b50565b6123dd81611e4a565b6001600160a01b0381166000908152600960205260409020546123d15760405162461bcd60e51b815260206004820152601060248201526f6e6f2072656c617920776f726b65727360801b60448201526064016107b0565b60006124418284613e93565b9392505050565b60008183106124575781612441565b5090919050565b60006124418284613e3a565b60006124418284613e74565b60006124418284613e52565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6123d181610400612b90565b600082826040516020016124f3929190613b7d565b604051602081830303815290604052905061250d816124d2565b8051602082018181fd5b6000806060600061252787612ba1565b9050600061255261253b60208a018a613d63565b61254d9061010081019060e00161311b565b612be0565b90506125616020890189613d63565b6125739061010081019060e00161311b565b6001600160a01b031663e024dc7f60e01b61258e8a80613d4d565b836040518060400160405280600c81526020016b14995b185e54995c5d595cdd60a21b8152506040518060a0016040528060618152602001613f5f6061913960405180610100016040528060c28152602001613fc060c291396040516020016125f791906139c5565b60408051601f1981840301815290829052612616939291602001613966565b60405160208183030381529060405280519060200120868c8c60405160240161264496959493929190613be5565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051612682919061394a565b6000604051808303816000865af19150503d80600081146126bf576040519150601f19603f3d011682016040523d82523d6000602084013e6126c4565b606091505b50909550925084156126ea57828060200190518101906126e491906132c8565b90945092505b6126f3836124d2565b505093509350939050565b600061270983612c59565b801561244157506124418383612c8c565b60006127268480613d4d565b61273490602081019061311b565b61273e8580613d4d565b6080013584846040516020016127579493929190613aa6565b6040516020818303038152906040528051906020012090509392505050565b6000612783826004613e3a565b835110156127d35760405162461bcd60e51b815260206004820152601a60248201527f726561644279746573343a206461746120746f6f2073686f727400000000000060448201526064016107b0565b5001602001516001600160e01b03191690565b6128116040518060800160405280600081526020016000815260200160008152602001600081525090565b60006128206020850185613d63565b6128319060e081019060c00161311b565b6001600160a01b031663b039a88f61c3506040518263ffffffff1660e01b815260040160806040518083038187803b15801561286c57600080fd5b5086fa158015612880573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906128a591906133c0565b60608101519092503611156128fc5760405162461bcd60e51b815260206004820152601760248201527f6d73672e64617461206578636565646564206c696d697400000000000000000060448201526064016107b0565b815185101561294d5760405162461bcd60e51b815260206004820152601a60248201527f616363657074616e63652062756467657420746f6f206869676800000000000060448201526064016107b0565b6020820151825110156129a25760405162461bcd60e51b815260206004820152601960248201527f616363657074616e63652062756467657420746f6f206c6f770000000000000060448201526064016107b0565b826129b06020860186613d63565b608001356129be9190613e3a565b905060006129d3826103486020880188613d63565b9050600a60006129e66020880188613d63565b6129f79060e081019060c00161311b565b6001600160a01b03166001600160a01b0316815260200190815260200160002054811115612a675760405162461bcd60e51b815260206004820152601960248201527f5061796d61737465722062616c616e636520746f6f206c6f770000000000000060448201526064016107b0565b50935093915050565b6000612a96612a826020880188613d63565b612a9190610100810190613d07565b612d75565b612ab1612aa38880613d4d565b612a919060a0810190613d07565b612abb8585612d75565b612ac58888612d75565b612ad1906102e4613e3a565b612adb9190613e3a565b612ae59190613e3a565b612aef9190613e3a565b90506041841115612b425760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e677468000000000000000060448201526064016107b0565b368114612b885760405162461bcd60e51b81526020600482015260146024820152736578747261206d73672e6461746120627974657360601b60448201526064016107b0565b505050505050565b8082511115612b9d578082525b5050565b6060612bb8612bb36020840184613d63565b612d9b565b604051602001612bca91815260200190565b6040516020818303038152906040529050919050565b6040805160c0810182526017608082019081527f47534e2052656c61796564205472616e73616374696f6e00000000000000000060a083015281528151808301835260018152601960f91b6020808301919091528201526000916108c591908101468152602001846001600160a01b0316815250612ea2565b6000612c6c826301ffc9a760e01b612c8c565b80156108c55750612c85826001600160e01b0319612c8c565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090612cf390869061394a565b6000604051808303818686fa925050503d8060008114612d2f576040519150601f19603f3d011682016040523d82523d6000602084013e612d34565b606091505b5091509150602081511015612d4f57600093505050506108c5565b818015612d6b575080806020019051810190612d6b91906132ad565b9695505050505050565b6000612d84601f600019613e93565b612d8f83601f613e3a565b61244191166020613e3a565b600060405180610100016040528060c28152602001613fc060c2913980516020918201209083359084013560408501356060860135612de060c0880160a0890161311b565b612df060e0890160c08a0161311b565b612e016101008a0160e08b0161311b565b612e0f6101008b018b613d07565b604051612e1d92919061393a565b60408051918290038220602083019a909a528101979097526060870195909552608086019390935260a08501919091526001600160a01b0390811660c085015290811660e0840152166101008201526101208082019290925290830135610140820152610160015b604051602081830303815290604052805190602001209050919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82600001518051906020012083602001518051906020012084604001518560600151604051602001612e859594939291909485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b604051806101a0016040528060001515815260200160006001600160e01b0319168152602001600081526020016060815260200160608152602001612f886040518060800160405280600081526020016000815260200160008152602001600081525090565b815260200160008152600060208201819052604082018190526060808301829052608083015260a0820181905260c09091015290565b8035612fc981613f49565b919050565b600082601f830112612fdf57600080fd5b81356020612ff4612fef83613dd2565b613da2565b80838252828201915082860187848660051b890101111561301457600080fd5b60005b8581101561303357813584529284019290840190600101613017565b5090979650505050505050565b80518015158114612fc957600080fd5b60008083601f84011261306257600080fd5b5081356001600160401b0381111561307957600080fd5b60208301915083602082850101111561309157600080fd5b9250929050565b600082601f8301126130a957600080fd5b81516001600160401b038111156130c2576130c2613f33565b6130d5601f8201601f1916602001613da2565b8181528460208386010111156130ea57600080fd5b6130fb826020830160208701613eaa565b949350505050565b60006040828403121561311557600080fd5b50919050565b60006020828403121561312d57600080fd5b813561244181613f49565b6000806040838503121561314b57600080fd5b823561315681613f49565b9150602083013561316681613f49565b809150509250929050565b6000806020838503121561318457600080fd5b82356001600160401b038082111561319b57600080fd5b818501915085601f8301126131af57600080fd5b8135818111156131be57600080fd5b8660208260051b85010111156131d357600080fd5b60209290920196919550909350505050565b600080604083850312156131f857600080fd5b82356001600160401b038082111561320f57600080fd5b818501915085601f83011261322357600080fd5b81356020613233612fef83613dd2565b8083825282820191508286018a848660051b890101111561325357600080fd5b600096505b8487101561327f57803561326b81613f49565b835260019690960195918301918301613258565b509650508601359250508082111561329657600080fd5b506132a385828601612fce565b9150509250929050565b6000602082840312156132bf57600080fd5b61244182613040565b600080604083850312156132db57600080fd5b6132e483613040565b915060208301516001600160401b038111156132ff57600080fd5b6132a385828601613098565b60006020828403121561331d57600080fd5b81356001600160e01b03198116811461244157600080fd5b6000806040838503121561334857600080fd5b82516001600160401b0381111561335e57600080fd5b61336a85828601613098565b92505061337960208401613040565b90509250929050565b6000806040838503121561339557600080fd5b8251600781106133a457600080fd5b60208401519092506001600160401b038111156132ff57600080fd5b6000608082840312156133d257600080fd5b604051608081018181106001600160401b03821117156133f4576133f4613f33565b8060405250825181526020830151602082015260408301516040820152606083015160608201528091505092915050565b600060e0828403121561343757600080fd5b61343f613d7a565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013561347981613f49565b60a082015260c083013560ff8116811461349257600080fd5b60c08201529392505050565b600080600080600080600080888a036101208112156134bc57600080fd5b89356001600160401b03808211156134d357600080fd5b6134df8d838e01613103565b9a5060208c01359150808211156134f557600080fd5b6135018d838e01613050565b909a50985060408c013591508082111561351a57600080fd5b506135278c828d01613050565b9097509550506080605f198201121561353f57600080fd5b5096999598509396929550909360608301935060e08301359261010001359150565b60008082840360c081121561357557600080fd5b60a081121561358357600080fd5b5060405160a081018181106001600160401b03821117156135a6576135a6613f33565b806040525083518152602084015160208201526040840151604082015260608401516135d181613f49565b606082015260808401516135e481613f49565b6080820152915061337960a08401613040565b60006020828403121561360957600080fd5b5035919050565b60006020828403121561362257600080fd5b5051919050565b6000806040838503121561363c57600080fd5b82359150602083013561316681613f49565b6000806040838503121561366157600080fd5b8235915060208301356001600160401b0381111561367e57600080fd5b8301610140818603121561316657600080fd5b600080600080600080608087890312156136aa57600080fd5b8635955060208701356001600160401b03808211156136c857600080fd5b6136d48a838b01613103565b965060408901359150808211156136ea57600080fd5b6136f68a838b01613050565b9096509450606089013591508082111561370f57600080fd5b5061371c89828a01613050565b979a9699509497509295939492505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815180845261376f816020860160208601613eaa565b601f01601f19169290920160200192915050565b600781106137a157634e487b7160e01b600052602160045260246000fd5b9052565b600081356137b281613f49565b6001600160a01b0390811684526020830135906137ce82613f49565b1660208401526040828101359084015260608083013590840152608080830135908401526137ff60a0830183613df5565b60e060a086015261381460e08601828461372e565b91505060c083013560c08501528091505092915050565b6000610140823584526020830135602085015260408301356040850152606083013560608501526080830135608085015261386860a08401612fbe565b6001600160a01b031660a085015261388260c08401612fbe565b6001600160a01b031660c085015261389c60e08401612fbe565b6001600160a01b031660e08501526101006138b984820185613df5565b83838801526138cb848801828461372e565b6101209687013597909601969096525092949350505050565b6000813582360360de19810182126138fb57600080fd5b6040855261390e604086018584016137a5565b9150602084013561013e198201811261392657600080fd5b8583036020870152612d6b8386830161382b565b8183823760009101908152919050565b6000825161395c818460208701613eaa565b9190910192915050565b60008451613978818460208901613eaa565b600560fb1b9083019081528451613996816001840160208901613eaa565b600b60fa1b6001929091019182015283516139b8816002840160208801613eaa565b0160020195945050505050565b7352656c6179446174612072656c6179446174612960601b8152600082516139f4816014850160208701613eaa565b9190910160140192915050565b6001600160a01b0387811682528681166020830152851660408201526001600160e01b03198416606082015260c08101613a3e6080830185613783565b8260a0830152979650505050505050565b6001600160a01b0387811682528681166020830152851660408201526001600160e01b0319841660608201526080810183905260c060a08201819052600090613a9a90830184613757565b98975050505050505050565b60018060a01b0385168152836020820152606060408201526000612d6b60608301848661372e565b6040808252810183905260008460608301825b86811015613b11578235613af481613f49565b6001600160a01b0316825260209283019290910190600101613ae1565b5060209390930193909352509392505050565b82151581526040602082015260006130fb6040830184613757565b608081526000613b526080830187613757565b85151560208401528460408401528281036060840152613b72818561382b565b979650505050505050565b613b878184613783565b6040602082015260006130fb6040830184613757565b6020815260006124416020830184613757565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60a081526000613bf860a08301896137a5565b8760208401528660408401528281036060840152613c168187613757565b90508281036080840152613c2b81858761372e565b9998505050505050505050565b6000610120808352613c4c8184018c6138e4565b90508281036020840152613c61818a8c61372e565b90508281036040840152613c7681888a61372e565b9150508451606083015260208501516080830152604085015160a0830152606085015160c08301528360e0830152826101008301529998505050505050505050565b608081526000613ccb60808301896138e4565b8281036020840152613cde81888a61372e565b90508281036040840152613cf381868861372e565b915050826060830152979650505050505050565b6000808335601e19843603018112613d1e57600080fd5b8301803591506001600160401b03821115613d3857600080fd5b60200191503681900382131561309157600080fd5b6000823560de1983360301811261395c57600080fd5b6000823561013e1983360301811261395c57600080fd5b60405160e081016001600160401b0381118282101715613d9c57613d9c613f33565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613dca57613dca613f33565b604052919050565b60006001600160401b03821115613deb57613deb613f33565b5060051b60200190565b6000808335601e19843603018112613e0c57600080fd5b83016020810192503590506001600160401b03811115613e2b57600080fd5b80360383131561309157600080fd5b60008219821115613e4d57613e4d613ef1565b500190565b600082613e6f57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615613e8e57613e8e613ef1565b500290565b600082821015613ea557613ea5613ef1565b500390565b60005b83811015613ec5578181015183820152602001613ead565b838111156120ec5750506000910152565b6000600019821415613eea57613eea613ef1565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146123d157600080fdfe616464726573732066726f6d2c6164647265737320746f2c75696e743235362076616c75652c75696e74323536206761732c75696e74323536206e6f6e63652c627974657320646174612c75696e743235362076616c6964556e74696c54696d6552656c6179446174612875696e74323536206d61784665655065724761732c75696e74323536206d61785072696f726974794665655065724761732c75696e743235362070637452656c61794665652c75696e74323536206261736552656c61794665652c616464726573732072656c6179576f726b65722c61646472657373207061796d61737465722c6164647265737320666f727761726465722c6279746573207061796d6173746572446174612c75696e7432353620636c69656e74496429332e302e302d616c7068612e332b6f70656e67736e2e6172626875622e6972656c6179687562a2646970667358221220b45e54d125877b9840aee76a5bb1a52a558569746f05770dcb764e308c7d943964736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "aggregateGasleft()": {
        "returns": {
          "_0": "A total measurable amount of gas left to current execution. Same as 'gasleft()' for pure EVMs."
        }
      },
      "balanceOf(address)": {
        "returns": {
          "_0": "An account's balance. It can be either a deposit of a `Paymaster`, or a revenue of a Relay Manager."
        }
      },
      "calculateCharge(uint256,(uint256,uint256,uint256,uint256,uint256,address,address,address,bytes,uint256))": {
        "params": {
          "gasUsed": "An amount of gas used by the transaction.",
          "relayData": "The details of a transaction signed by the sender."
        },
        "returns": {
          "_0": "The calculated charge, in wei."
        }
      },
      "calculateDevCharge(uint256)": {
        "params": {
          "charge": "The amount of Ether in wei the Paymaster will be charged for this transaction."
        },
        "returns": {
          "_0": "The calculated devFee, in wei."
        }
      },
      "deprecateHub(uint256)": {
        "params": {
          "_deprecationTime": "The timestamp in seconds after which the `RelayHub` stops serving transactions."
        }
      },
      "getBatchGateway()": {
        "returns": {
          "_0": "The `BatchGateway` address for this `RelayHub`."
        }
      },
      "getConfiguration()": {
        "returns": {
          "_0": "The configuration of the `RelayHub`."
        }
      },
      "getCreationBlock()": {
        "returns": {
          "_0": "The block number in which the contract has been deployed."
        }
      },
      "getDeprecationTime()": {
        "returns": {
          "_0": "The timestamp from which the hub no longer allows relaying calls."
        }
      },
      "getL1CreationBlock()": {
        "returns": {
          "_0": "The block number in which the contract has been deployed."
        }
      },
      "getMinimumStakePerToken(address)": {
        "params": {
          "token": "An address of an ERC-20 compatible tokens."
        },
        "returns": {
          "_0": "The minimum amount of a given `token` that needs to be staked so that the Relay Manager is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking."
        }
      },
      "getPenalizer()": {
        "returns": {
          "_0": "The `Penalizer` address for this `RelayHub`."
        }
      },
      "getRelayRegistrar()": {
        "returns": {
          "_0": "The `RelayRegistrar` address for this `RelayHub`."
        }
      },
      "getStakeManager()": {
        "returns": {
          "_0": "The `StakeManager` address for this `RelayHub`."
        }
      },
      "getWorkerCount(address)": {
        "params": {
          "manager": "An address of the Relay Manager."
        },
        "returns": {
          "_0": "The count of Relay Workers associated with this Relay Manager."
        }
      },
      "getWorkerManager(address)": {
        "params": {
          "worker": "An address of the Relay Worker."
        },
        "returns": {
          "_0": "The address of its Relay Manager."
        }
      },
      "isDeprecated()": {
        "returns": {
          "_0": "`true` if the `RelayHub` is deprecated, `false` it it is not deprecated and can serve transactions."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "penalize(address,address)": {
        "params": {
          "beneficiary": "The address that called the `Penalizer` and will receive a reward for it.",
          "relayWorker": "The address of the Relay Worker that committed a penalizable offense."
        }
      },
      "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes)": {
        "params": {
          "approvalData": "The dapp-specific data forwarded to the `Paymaster`'s `preRelayedCall` method. This value is **not** verified by the `RelayHub` in any way. As an example, it can be used to pass some kind of a third-party signature to the `Paymaster` for verification. Emits a `TransactionRelayed` event regardless of whether the transaction succeeded or failed.",
          "maxAcceptanceBudget": "The maximum valid value for `paymaster.getGasLimits().acceptanceBudget` to return.",
          "relayRequest": "All details of the requested relayed call.",
          "signature": "The client's EIP-712 signature over the `relayRequest` struct."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setConfiguration((uint256,uint256,uint256,uint256,uint256,address,uint8))": {
        "params": {
          "_config": "The new configuration."
        }
      },
      "setMinimumStakes(address[],uint256[])": {
        "params": {
          "minimumStake": "An array of minimal amounts necessary for a corresponding token, in wei.",
          "token": "An array of addresses of ERC-20 compatible tokens."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "versionHub()": {
        "returns": {
          "_0": "a SemVer-compliant version of the `RelayHub` contract."
        }
      }
    },
    "title": "The RelayHub Implementation for Arbitrum",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposited(address,address,uint256)": {
        "notice": "Emitted when `depositFor` is called, including the amount and account that was funded."
      },
      "HubDeprecated(uint256)": {
        "notice": "This event is emitted in case this `RelayHub` is deprecated and will stop serving transactions soon."
      },
      "RelayHubConfigured((uint256,uint256,uint256,uint256,uint256,address,uint8))": {
        "notice": "Emitted when a configuration of the `RelayHub` is changed"
      },
      "RelayWorkersAdded(address,address[],uint256)": {
        "notice": "Emitted when relays are added by a relayManager"
      },
      "StakingTokenDataChanged(address,uint256)": {
        "notice": "Emitted for each token configured for staking in setMinimumStakes"
      },
      "TransactionRejectedByPaymaster(address,address,bytes32,address,address,address,bytes4,uint256,bytes)": {
        "notice": "Emitted when an attempt to relay a call fails and the `Paymaster` does not accept the transaction. The actual relayed call was not executed, and the recipient not charged."
      },
      "TransactionRelayed(address,address,bytes32,address,address,address,bytes4,uint8,uint256)": {
        "notice": "Emitted when a transaction is relayed. Note that the actual internal function call might be reverted. The reason for a revert will be indicated in the `status` field of a corresponding `RelayCallStatus` value.`charge` is the Ether value deducted from the `Paymaster` balance. The amount added to the `relayManager` balance will be lower if there is an activated `devFee` in the `config`."
      },
      "TransactionResult(uint8,bytes)": {
        "notice": "This event is emitted in case the internal function returns a value or reverts with a revert string."
      },
      "Withdrawn(address,address,uint256)": {
        "notice": "Emitted when an account withdraws funds from the `RelayHub`."
      }
    },
    "kind": "user",
    "methods": {
      "addRelayWorkers(address[])": {
        "notice": "Add new worker addresses controlled by the sender who must be a staked Relay Manager address. Emits a `RelayWorkersAdded` event. This function can be called multiple times, emitting new events."
      },
      "aggregateGasleft()": {
        "notice": "Includes the 'storage gas' specific to the Arbitrum Rollup."
      },
      "calculateCharge(uint256,(uint256,uint256,uint256,uint256,uint256,address,address,address,bytes,uint256))": {
        "notice": "The fee is expressed as a base fee in wei plus percentage of the actual charge. For example, a value '40' stands for a 40% fee, so the recipient will be charged for 1.4 times the spent amount."
      },
      "calculateDevCharge(uint256)": {
        "notice": "The fee is expressed as a  percentage of the actual charge. For example, a value '40' stands for a 40% fee, so the Relay Manager will only get 60% of the `charge`."
      },
      "constructor": {
        "notice": "we accept the `ArbSys` address in the constructor to allow mocking it in tests."
      },
      "depositFor(address)": {
        "notice": "Deposits ether for a `Paymaster`, so that it can and pay for relayed transactions. :warning: **Warning** :warning: Unused balance can only be withdrawn by the holder itself, by calling `withdraw`. Emits a `Deposited` event."
      },
      "deprecateHub(uint256)": {
        "notice": "Deprecate hub by reverting all incoming `relayCall()` calls starting from a given timestamp"
      },
      "getCreationBlock()": {
        "notice": "Uses `ArbSys` L2 block number specific to the Arbitrum Rollup."
      },
      "getL1CreationBlock()": {
        "notice": "Uses original L1 block number."
      },
      "innerRelayCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,(uint256,uint256,uint256,uint256),uint256,uint256)": {
        "notice": "This method can only by called by this `RelayHub`. It wraps the execution of the `RelayRequest` in a revertable frame context."
      },
      "penalize(address,address)": {
        "notice": "In case the Relay Worker has been found to be in violation of some rules by the `Penalizer` contract, the `Penalizer` will call this method to execute a penalization. The `RelayHub` will look up the Relay Manager of the given Relay Worker and will forward the call to the `StakeManager` contract. The `RelayHub` does not perform the actual penalization either."
      },
      "relayCall(uint256,((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes)": {
        "notice": "Relays a transaction. For this to succeed, multiple conditions must be met:  - `Paymaster`'s `preRelayCall` method must succeed and not revert.  - the `msg.sender` must be a registered Relay Worker that the user signed to use.  - the transaction's gas fees must be equal or larger than the ones that were signed by the sender.  - the transaction must have enough gas to run all internal transactions if they use all gas available to them.  - the `Paymaster` must have enough balance to pay the Relay Worker if all gas is spent.If all conditions are met, the call will be relayed and the `Paymaster` charged."
      },
      "setConfiguration((uint256,uint256,uint256,uint256,uint256,address,uint8))": {
        "notice": "Sets or changes the configuration of this `RelayHub`."
      },
      "setMinimumStakes(address[],uint256[])": {
        "notice": "Sets or changes the minimum amount of a given `token` that needs to be staked so that the Relay Manager is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking."
      },
      "verifyRelayManagerStaked(address)": {
        "notice": "Uses `StakeManager` to decide if the Relay Manager can be considered staked or not. Returns if the stake's token, amount and delay satisfy all requirements, reverts otherwise."
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraws from an account's balance, sending it back to the caller. Relay Managers call this to retrieve their revenue, and `Paymasters` can also use it to reduce their funding. Emits a `Withdrawn` event."
      }
    },
    "notice": "This contract implements the `IRelayHub` interface for the Arbitrum-compatible Rollups.This implementation relies on the `ArbSys` built-ins that do not exist outside of Arbitrum.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3589,
        "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
        "label": "config",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(RelayHubConfig)7176_storage"
      },
      {
        "astId": 3632,
        "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
        "label": "minimumStakePerToken",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_contract(IERC20)731,t_uint256)"
      },
      {
        "astId": 3695,
        "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
        "label": "workerToManager",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3699,
        "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
        "label": "workerCount",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3703,
        "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
        "label": "balances",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3712,
        "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
        "label": "deprecationTime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)731": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)731,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)731",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RelayHubConfig)7176_storage": {
        "encoding": "inplace",
        "label": "struct IRelayHub.RelayHubConfig",
        "members": [
          {
            "astId": 7163,
            "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
            "label": "maxWorkerCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7165,
            "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
            "label": "gasReserve",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7167,
            "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
            "label": "postOverhead",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7169,
            "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
            "label": "gasOverhead",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7171,
            "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
            "label": "minimumUnstakeDelay",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7173,
            "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
            "label": "devAddress",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 7175,
            "contract": "contracts-link/arbitrum/ArbRelayHub.sol:ArbRelayHub",
            "label": "devFee",
            "offset": 20,
            "slot": "5",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}